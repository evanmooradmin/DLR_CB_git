
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls
 *	Class: 		AnswerWillVaryViewControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\AnswerWillVaryViewControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:02 EEST
 */

package Controls.SimplePromptControls
{

import Controls.Enviroment.TextExended;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.HBox;
import mx.controls.Button;
import mx.controls.Label;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.effects.Fade;
import mx.effects.Parallel;
import mx.events.EffectEvent;
import mx.events.FlexEvent;
import mx.styles.*;



//	begin class def

public class AnswerWillVaryViewControl
	extends mx.containers.HBox
	implements mx.binding.IBindingClient
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var ParallelEffectHide : mx.effects.Parallel;

	[Bindable]
/**
 * @private
 **/
	public var ParallelEffectShow : mx.effects.Parallel;

	[Bindable]
/**
 * @private
 **/
	public var btnShow : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var fadeEffectHide : mx.effects.Fade;

	[Bindable]
/**
 * @private
 **/
	public var hBoxContainer : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var hbox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var lbHeaderText : mx.controls.Label;

	[Bindable]
/**
 * @private
 **/
	public var moveEffectShow : mx.effects.Fade;

	[Bindable]
/**
 * @private
 **/
	public var txtContent : Controls.Enviroment.TextExended;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.HBox
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "hBoxContainer"
        ,
        stylesFactory: function():void {
          this.verticalAlign = "middle";
          this.backgroundColor = 16777215;
        }
        ,
        propertiesFactory: function():Object { return {
          verticalScrollPolicy: "off",
          horizontalScrollPolicy: "off",
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.HBox
              ,
              id: "hbox"
              ,
              stylesFactory: function():void {
                this.backgroundColor = 16777215;
                this.verticalAlign = "middle";
              }
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Label
                    ,
                    id: "lbHeaderText"
                    ,
                    propertiesFactory: function():Object { return {
                      text: "Suggested Answer:",
                      selectable: false
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: Controls.Enviroment.TextExended
                    ,
                    id: "txtContent"
                    ,
                    propertiesFactory: function():Object { return {
                      selectable: false
                    }}
                  })
                ]
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Button
              ,
              id: "btnShow"
              ,
              events: {
                click: "__btnShow_click"
              }
              ,
              stylesFactory: function():void {
                this.verticalCenter = "0";
              }
              ,
              propertiesFactory: function():Object { return {
                styleName: "ButtonHideDefinition"
              }}
            })
          ]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function AnswerWillVaryViewControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings
		//	initialize component styles
		if (!this.styleDeclaration)
		{
			this.styleDeclaration = new CSSStyleDeclaration();
		}

		this.styleDeclaration.defaultFactory = function():void
		{
			this.horizontalAlign = "right";
			this.verticalAlign = "middle";
		};



		//	properties
		this.verticalScrollPolicy = "off";
		this.horizontalScrollPolicy = "off";
		_AnswerWillVaryViewControl_Parallel2_i();
		_AnswerWillVaryViewControl_Parallel1_i();

		//	events
		this.addEventListener("creationComplete", ___AnswerWillVaryViewControl_HBox1_creationComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _AnswerWillVaryViewControl_bindingsSetup();
		var watchers:Array = [];

		var target:AnswerWillVaryViewControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_AnswerWillVaryViewControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 6 - 104

      import Model.Events.AnswerWillVaryViewControlEvent;
      import Controls.QuizControl;
      import Controls.SimplePromptControls.Open_endedWritingPrompt.Open_endedWritingPromptAdvanced;
      import mx.core.Application;
      import mx.controls.PopUpButton;
      import mx.managers.PopUpManager;
      import mx.core.UIComponent;
      import Controls.ActivityControl;
    
      
      public var parentObject:UIComponent; 
      
      private var _isShow:Boolean = false;
      private var _isShowNow:Boolean = false;
      
      
      public static function Show(parent:UIComponent, headerText:String, point:Point, FontName:String, FontSize:int, FontColor:int):AnswerWillVaryViewControl
      {
        var answerWillVary:AnswerWillVaryViewControl = new AnswerWillVaryViewControl();
        
        PopUpManager.addPopUp(answerWillVary, parent);
        
        answerWillVary.x = point.x;
        answerWillVary.y = point.y;
        answerWillVary.maxWidth = parent.width;
        answerWillVary.txtContent.htmlText = headerText;
        answerWillVary.width = parent.width;
        answerWillVary.parentObject = parent;
        
        answerWillVary.txtContent.setStyle("fontFamily", 'EMComic');
        answerWillVary.txtContent.setStyle("fontSize", 14);
        answerWillVary.txtContent.setStyle("color",0x6C6F70);
        
        answerWillVary.lbHeaderText.setStyle("fontFamily",'EMComic');
        answerWillVary.lbHeaderText.setStyle("fontSize", 14);
        answerWillVary.lbHeaderText.setStyle("color",0x2C75BB);
        
       
        answerWillVary.hBoxContainer.setStyle("borderStyle", "solid");
        answerWillVary.hBoxContainer.setStyle("borderThickness", 2);
        answerWillVary.hBoxContainer.setStyle("cornerRadius", 3);
        answerWillVary.hBoxContainer.setStyle("borderColor", 0x88C4DE);
        
        //answerWillVary.cnvBorder.filters = [new DropShadowFilter(5,35,13290701)];
        return answerWillVary;
      }
      
   
     private function Clik_ApplicationHandler(event:MouseEvent):void
     {
       if (_isShowNow == false)
       {
           this.ParallelEffectHide.play();
           systemManager.removeEventListener(MouseEvent.CLICK, Clik_ApplicationHandler);
       }
     }
     
     private function creationCompleteHandler():void
     {
       
       this.y -= this.height/2;
       this.y += parentObject.height/2;  
       
       this.hbox.width += 15; 
       hBoxContainer.filters = [new DropShadowFilter(5,35,13290701)];
       fadeEffectHide.targets = [hBoxContainer];
       
       systemManager.addEventListener(MouseEvent.CLICK, Clik_ApplicationHandler);
       this.ParallelEffectShow.play();
     }
     
     
     private function Clik_btnShowHandler(event:MouseEvent):void
     {
       if (_isShowNow == false)
       {
           systemManager.removeEventListener(MouseEvent.CLICK, Clik_ApplicationHandler);
           this.ParallelEffectHide.play();
       }
     }  
  
     private function effectEnd_ParallelEffectHideHindler():void
     {
        dispatchEvent(new AnswerWillVaryViewControlEvent(AnswerWillVaryViewControlEvent.ANSWER_WILL_VARY_EVENT, true));
        PopUpManager.removePopUp(this);
     } 
     
//    <mx:Parallel id="ParallelEffectShow"  effectStart="{this._isShowNow = true}" effectEnd="{this._isShowNow = false}" >
//    <mx:Rotate angleFrom="0" angleTo="180" target="{btnShow}"/>
//    <mx:Fade  id="moveEffectShow" alphaFrom="0" alphaTo="1" duration="450" target="{this}"/>
//    </mx:Parallel>
//  
//    <mx:Parallel id="ParallelEffectHide" effectEnd="effectEnd_ParallelEffectHideHindler()" effectStart="{this._isShowNow = true}">
//    <mx:Rotate angleFrom="180" angleTo="0" target="{btnShow}" duration="400" />
//    <mx:Fade id="fadeEffectHide"  alphaFrom="1" alphaTo="0" />
//    </mx:Parallel>
     
    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _AnswerWillVaryViewControl_Parallel2_i() : mx.effects.Parallel
{
	var temp : mx.effects.Parallel = new mx.effects.Parallel();
	ParallelEffectHide = temp;
	temp.children = [_AnswerWillVaryViewControl_Fade2_i()];
	temp.addEventListener("effectEnd", __ParallelEffectHide_effectEnd);
	temp.addEventListener("effectStart", __ParallelEffectHide_effectStart);
	return temp;
}

private function _AnswerWillVaryViewControl_Fade2_i() : mx.effects.Fade
{
	var temp : mx.effects.Fade = new mx.effects.Fade();
	fadeEffectHide = temp;
	temp.alphaFrom = 1;
	temp.alphaTo = 0;
	return temp;
}

/**
 * @private
 **/
public function __ParallelEffectHide_effectEnd(event:mx.events.EffectEvent):void
{
	effectEnd_ParallelEffectHideHindler()
}

/**
 * @private
 **/
public function __ParallelEffectHide_effectStart(event:mx.events.EffectEvent):void
{
	{this._isShowNow = true}
}

private function _AnswerWillVaryViewControl_Parallel1_i() : mx.effects.Parallel
{
	var temp : mx.effects.Parallel = new mx.effects.Parallel();
	ParallelEffectShow = temp;
	temp.children = [_AnswerWillVaryViewControl_Fade1_i()];
	temp.addEventListener("effectStart", __ParallelEffectShow_effectStart);
	temp.addEventListener("effectEnd", __ParallelEffectShow_effectEnd);
	return temp;
}

private function _AnswerWillVaryViewControl_Fade1_i() : mx.effects.Fade
{
	var temp : mx.effects.Fade = new mx.effects.Fade();
	moveEffectShow = temp;
	temp.alphaFrom = 0;
	temp.alphaTo = 1;
	temp.duration = 450;
	mx.binding.BindingManager.executeBindings(this, "moveEffectShow", moveEffectShow);
	return temp;
}

/**
 * @private
 **/
public function __ParallelEffectShow_effectStart(event:mx.events.EffectEvent):void
{
	{this._isShowNow = true}
}

/**
 * @private
 **/
public function __ParallelEffectShow_effectEnd(event:mx.events.EffectEvent):void
{
	{this._isShowNow = false}
}

/**
 * @private
 **/
public function ___AnswerWillVaryViewControl_HBox1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler();
}

/**
 * @private
 **/
public function __btnShow_click(event:flash.events.MouseEvent):void
{
	Clik_btnShowHandler(event)
}


	//	binding mgmt
    private function _AnswerWillVaryViewControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                moveEffectShow.target = _sourceFunctionReturnValue;
            },
            "moveEffectShow.target");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.maxWidth);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxContainer.maxWidth = _sourceFunctionReturnValue;
            },
            "hBoxContainer.maxWidth");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width - lbHeaderText.width - btnShow.width - 50 );
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                txtContent.maxWidth = _sourceFunctionReturnValue;
            },
            "txtContent.maxWidth");
        result[2] = binding;

        return result;
    }

    private function _AnswerWillVaryViewControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (this);
		[Binding(id='1')]
		destination = (this.maxWidth);
		[Binding(id='2')]
		destination = (this.width - lbHeaderText.width - btnShow.width - 50 );
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (AnswerWillVaryViewControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
