
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls
 *	Class: 		SentenceEvaluationViewControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\SentenceEvaluationViewControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:04 EEST
 */

package Controls.SimplePromptControls
{

import Controls.Enviroment.TextExended;
import Interfaces.IDirectionPrompt;
import Interfaces.IFontStyle;
import Interfaces.IResult;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.display.DisplayObject;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Image;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.effects.Blur;
import mx.effects.Parallel;
import mx.effects.Resize;
import mx.effects.Sequence;
import mx.states.AddChild;
import mx.states.RemoveChild;
import mx.states.State;
import mx.states.Transition;
import mx.styles.*;



//	begin class def

public class SentenceEvaluationViewControl
	extends mx.containers.Canvas
	implements Interfaces.IDirectionPrompt, Interfaces.IFontStyle, Interfaces.IResult, mx.binding.IBindingClient
{

	//	instance variables
/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_AddChild4 : mx.states.AddChild;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_RemoveChild1 : mx.states.RemoveChild;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_State1 : mx.states.State;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_State3 : mx.states.State;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_State5 : mx.states.State;

/**
 * @private
 **/
	public var _SentenceEvaluationViewControl_Transition1 : mx.states.Transition;

	[Bindable]
/**
 * @private
 **/
	public var hBoxCorrect : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var hBoxIncorrect : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var imgCorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var imgIncorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var showPromptEffect : mx.effects.Parallel;

	[Bindable]
/**
 * @private
 **/
	public var showResizeEffect : mx.effects.Resize;

	[Bindable]
/**
 * @private
 **/
	public var stCorrect : mx.states.State;

	[Bindable]
/**
 * @private
 **/
	public var txtCorrect : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var txtIncorrect : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var vBoxAnswers : mx.containers.VBox;

	[Bindable]
/**
 * @private
 **/
	public var vBoxContent : mx.containers.VBox;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function SentenceEvaluationViewControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.verticalScrollPolicy = "off";
		this.horizontalScrollPolicy = "off";
		this.transitions = [_SentenceEvaluationViewControl_Transition1_i()];
		this.states = [_SentenceEvaluationViewControl_State1_i(), _SentenceEvaluationViewControl_State2_c(), _SentenceEvaluationViewControl_State3_i(), _SentenceEvaluationViewControl_State4_i(), _SentenceEvaluationViewControl_State5_i()];

		//	events

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _SentenceEvaluationViewControl_bindingsSetup();
		var watchers:Array = [];

		var target:SentenceEvaluationViewControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_SentenceEvaluationViewControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 7 - 300

      import Controls.FlowBox.FlowBox;
      import Model.EnumRegExp;
      import Model.Prompts.SentenceEvaluation;
      import Model.Prompts.Prompt;
      import Controls.ActivityControl;
      import Model.FactoryRegExp;
      import mx.events.FlexEvent;
      import Interfaces.IFontStyle;
      import Controls.SelectableLabel;
      import Model.EmbededData;
      import Model.Answers.SentenceEvaluationAnswer;
      import Model.Answers.Answer;


      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\SentenceEvaluationViewControl.mxml
      *
      *  Abstract:
      *     This is visual control for Sentence Evaluation answer prompt
      *
      *  Author:
      *     Evgenij Welikij   30-December-2009
      *
      *  Revision History:
      *
      ***************************************************************/


      /**
      * Static
      */


      /**
      * Private members/properties
      */
      private var _prompt:SentenceEvaluation;

      private var _fontName:String = "";
      [Bindable]
      private var _fontSize:int;
      private var _fontColor:int;

      private var _labels:Array = [];    // будет представлятся в виде МАТРИЦЫ!!!!!!!1
                                         // таки образом будем знать какое слово в какой строке стоит

      private const state_edit:String = "state_edit";
      private const state_incorrect:String = "state_incorrect";
      private const state_correct:String = "state_correct";
      private const state_continue:String = "state_continue";


      /**
      * Private methods
      */


      /**
      * Events handler
      */


      /**
      * Initialization
      */


      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */
      public virtual function FontName(name:String):void
      {
        this._fontName = name;

        for each (var arr:Array in _labels)
          for each (var item:IFontStyle in arr)
            item.FontName(name);

        txtIncorrect.setStyle("fontFamily", name);
        txtCorrect.setStyle("fontFamily", name);
      }

      public virtual function FontSize(size:int):void
      {
        this._fontSize = size;

        for each (var arr:Array in _labels)
          for each (var item:IFontStyle in arr)
            item.FontSize(size);

        txtIncorrect.setStyle("fontSize", size);
        txtCorrect.setStyle("fontSize", size);
      }

      public virtual function FontColor(color:int):void
      {
        this._fontColor = color;

        for each (var arr:Array in _labels)
          for each (var item:IFontStyle in arr)
            item.FontColor(color);

        txtIncorrect.setStyle("color", color);
        txtCorrect.setStyle("color", "color");
      }

      public virtual function Bold():void
      {
      }

      public virtual function Continue():void
      {
        currentState = state_continue;
      }

      public virtual function IsComplete():Boolean
      {
        for each (var arr:Array in _labels)
          for each (var item:SelectableLabel in arr)
            if (item.isSelected)
              return true;

        return false;
      }

      public virtual function Init(prompt:Prompt):void
      {
        _prompt = prompt as SentenceEvaluation;

        // Разбиваем предложение на строки(\n)
        var strings:Array = prompt.text.split("\n");

        var selectableLabel:SelectableLabel;
        var indexAnswer:int = 0;              // текущий индекс ответа
        var selected:Boolean;                 // признак того, что должно ли быть выделеным слово
        
       
        
        // для каждой строки создаем FlowBox и будем ложить его в vBoxContent
        for each (var str:String in strings)
        {
          var flowBox:FlowBox = new FlowBox();
          flowBox.setStyle("horizontalGap", 0);
          flowBox.setStyle("verticalGap", 0);
          flowBox.width = vBoxContent.width;

      
          str = FactoryRegExp.AddTagToEachWord(FactoryRegExp.instance.U_start(EnumRegExp.G), FactoryRegExp.instance.U_finish(EnumRegExp.G),
                                                                FactoryRegExp.U_START, FactoryRegExp.U_FINISH, str);
          str = FactoryRegExp.AddTagToEachWord(FactoryRegExp.instance.B_start(EnumRegExp.G), FactoryRegExp.instance.B_finish(EnumRegExp.G),
                                                                FactoryRegExp.B_START, FactoryRegExp.B_FINISH, str);

          // Оставляем по одному пробелу межу словами
          str  = str.replace(FactoryRegExp.instance.DeleteSpaces(EnumRegExp.G),' ');
          var words:Array = str.split(" ");
          _labels.push(new Array());
         
          // каждое слово ложим во FlowBox
          for each (var word:String in words)
          {
            selected = false;

            // если слово содержит <![CDATA[<WOL>]] вместо этого вставляем соответствующий ответ
            // и указываем что это слово должно быть выделенным (является правильным ответом)
            if (word.indexOf(Prompt.separator) != -1)
            {
              word = word.replace(new RegExp(Prompt.separatorPatternString, "i"),
                _prompt.ChildAnswers()[indexAnswer++].text);
              selected = true;
            }

            selectableLabel = new SelectableLabel(0x0, EmbededData.inctance.iconCorrectColor, word, selected);
            flowBox.addChild(selectableLabel);
            _labels[_labels.length - 1].push(selectableLabel);
          }

          vBoxContent.addChild(flowBox);
        }
      }

      public virtual function GetText():String
      {
        var result:String = "";
        for each (var arr:Array in _labels)
          for each (var item:SelectableLabel in arr)
          {
            item.FontName(name);
            if (item.isSelected)
            {
              if (item.mustSelected)
                result += item.centerString + " ";
              else
                result += " ";
            }
          }

        result = result.slice(0, result.length - 1);  // удаляем последний пробел

        return result;
      }

      public virtual function SetIncorrect():void
      {
        currentState = state_incorrect;
        txtIncorrect.htmlText = "";
        var color:String;

        for each (var arr:Array in _labels)
        {
          for each (var item:SelectableLabel in arr)
          {
            //
            if (item.mustSelected && item.select)
              color = EmbededData.inctance.iconIncorrectColorHex;
            else if (!item.mustSelected && item.select)
              color = EmbededData.inctance.iconIncorrectColorHex;
            else
              color = SelectableLabel.IntToHex(_fontColor);
            if (item.isUnderline == true)
                txtIncorrect.htmlText += "<u>" + item.ToString + "<font color='#" + color + "'>" + item.centerString + "</u></font>" +
                    item.AfterString + "</u> ";
            else      
                 txtIncorrect.htmlText += item.ToString + "<font color='#" + color + "'>" + item.centerString + "</font>" +
                    item.AfterString + " ";
          }
           //Объеденяем теги U чтобы 
          txtIncorrect.htmlText = txtIncorrect.htmlText.replace(new RegExp("<\\s*?/\\s*?[uU]\\s*?>(\\s*?)<\\s*?[uU]\\s*>","g"),"$1");
          
          txtIncorrect.htmlText += "\n";
        }
      }

      public virtual function SetCorrect():void
      {
        if (currentState != state_incorrect)
          stCorrect.basedOn = "state_answers";

        currentState = state_correct;
        txtCorrect.htmlText = "";
        var color:String;

        for each (var arr:Array in _labels)
        {
          for each (var item:SelectableLabel in arr)
          {
            if (item.mustSelected)
              color = EmbededData.inctance.iconCorrectColorHex;
            else
              color = SelectableLabel.IntToHex(_fontColor);
            
            
            if (item.isUnderline == true)
                txtCorrect.htmlText += "<u>" + item.ToString + "<font color='#" + color + "'>" + item.centerString + "</font>" +
                           item.AfterString + "</u> ";
            else        
                txtCorrect.htmlText += item.ToString + "<font color='#" + color + "'>" + item.centerString + "</font>" +
                         item.AfterString + " ";
          }
          //Объеденяем теги U чтобы 
          txtCorrect.htmlText = txtCorrect.htmlText.replace(new RegExp("<\\s*?/\\s*?[uU]\\s*?>(\\s*?)<\\s*?[uU]\\s*>","g"),"$1");
          txtCorrect.htmlText += "\n";
        }
      }

      public virtual function DefaultFont():void
      {
        for each (var arr:Array in _labels)
          for each (var item:IFontStyle in arr)
            item.DefaultFont()

        txtIncorrect.setStyle("fontFamily", "Futura");
        txtCorrect.setStyle("fontFamily", "Futura");
      }
      
    
      

      /**
      * Public members/properties
      */


      /**
      * Public methods
      */
    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _SentenceEvaluationViewControl_Transition1_i() : mx.states.Transition
{
	var temp : mx.states.Transition = new mx.states.Transition();
	_SentenceEvaluationViewControl_Transition1 = temp;
	temp.effect = _SentenceEvaluationViewControl_Parallel1_i();
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_Transition1", _SentenceEvaluationViewControl_Transition1);
	return temp;
}

private function _SentenceEvaluationViewControl_Parallel1_i() : mx.effects.Parallel
{
	var temp : mx.effects.Parallel = new mx.effects.Parallel();
	showPromptEffect = temp;
	temp.children = [_SentenceEvaluationViewControl_Resize1_i(), _SentenceEvaluationViewControl_Sequence1_c()];
	mx.binding.BindingManager.executeBindings(this, "showPromptEffect", showPromptEffect);
	return temp;
}

private function _SentenceEvaluationViewControl_Resize1_i() : mx.effects.Resize
{
	var temp : mx.effects.Resize = new mx.effects.Resize();
	showResizeEffect = temp;
	temp.duration = 300;
	temp.heightFrom = 0;
	return temp;
}

private function _SentenceEvaluationViewControl_Sequence1_c() : mx.effects.Sequence
{
	var temp : mx.effects.Sequence = new mx.effects.Sequence();
	temp.children = [_SentenceEvaluationViewControl_Blur1_c(), _SentenceEvaluationViewControl_Blur2_c()];
	return temp;
}

private function _SentenceEvaluationViewControl_Blur1_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 1.0;
	temp.blurYTo = 20.0;
	return temp;
}

private function _SentenceEvaluationViewControl_Blur2_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 20.0;
	temp.blurYTo = 1;
	return temp;
}

private function _SentenceEvaluationViewControl_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_SentenceEvaluationViewControl_State1 = temp;
	temp.overrides = [_SentenceEvaluationViewControl_AddChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_State1", _SentenceEvaluationViewControl_State1);
	return temp;
}

private function _SentenceEvaluationViewControl_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_SentenceEvaluationViewControl_AddChild1 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SentenceEvaluationViewControl_VBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_AddChild1", _SentenceEvaluationViewControl_AddChild1);
	return temp;
}

private function _SentenceEvaluationViewControl_VBox1_i() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	vBoxContent = temp;
	temp.horizontalScrollPolicy = "off";
	temp.verticalScrollPolicy = "off";
	temp.setStyle("verticalGap", 0);
	temp.id = "vBoxContent";
	mx.binding.BindingManager.executeBindings(this, "vBoxContent", vBoxContent);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _SentenceEvaluationViewControl_State2_c() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	temp.name = "state_answers";
	temp.overrides = [_SentenceEvaluationViewControl_AddChild2_i()];
	return temp;
}

private function _SentenceEvaluationViewControl_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_SentenceEvaluationViewControl_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SentenceEvaluationViewControl_VBox2_i);
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_AddChild2", _SentenceEvaluationViewControl_AddChild2);
	return temp;
}

private function _SentenceEvaluationViewControl_VBox2_i() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	vBoxAnswers = temp;
	temp.verticalScrollPolicy = "off";
	temp.horizontalScrollPolicy = "off";
	temp.id = "vBoxAnswers";
	mx.binding.BindingManager.executeBindings(this, "vBoxAnswers", vBoxAnswers);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _SentenceEvaluationViewControl_State3_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_SentenceEvaluationViewControl_State3 = temp;
	temp.basedOn = "state_answers";
	temp.overrides = [_SentenceEvaluationViewControl_AddChild3_i()];
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_State3", _SentenceEvaluationViewControl_State3);
	return temp;
}

private function _SentenceEvaluationViewControl_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_SentenceEvaluationViewControl_AddChild3 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SentenceEvaluationViewControl_HBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_AddChild3", _SentenceEvaluationViewControl_AddChild3);
	return temp;
}

private function _SentenceEvaluationViewControl_HBox1_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	hBoxIncorrect = temp;
	temp.verticalScrollPolicy = "off";
	temp.horizontalScrollPolicy = "off";
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxIncorrect";
	mx.binding.BindingManager.executeBindings(this, "hBoxIncorrect", hBoxIncorrect);
	if (!temp.document) temp.document = this;
	temp.addChild(_SentenceEvaluationViewControl_Image1_i());
	temp.addChild(_SentenceEvaluationViewControl_TextExended1_i());
	return temp;
}

private function _SentenceEvaluationViewControl_Image1_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgIncorrect = temp;
	temp.id = "imgIncorrect";
	mx.binding.BindingManager.executeBindings(this, "imgIncorrect", imgIncorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _SentenceEvaluationViewControl_TextExended1_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	txtIncorrect = temp;
	temp.percentWidth = 100.0;
	temp.selectable = false;
	temp.id = "txtIncorrect";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _SentenceEvaluationViewControl_State4_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	stCorrect = temp;
	temp.basedOn = "state_incorrect";
	temp.overrides = [_SentenceEvaluationViewControl_AddChild4_i()];
	mx.binding.BindingManager.executeBindings(this, "stCorrect", stCorrect);
	return temp;
}

private function _SentenceEvaluationViewControl_AddChild4_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_SentenceEvaluationViewControl_AddChild4 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_SentenceEvaluationViewControl_HBox2_i);
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_AddChild4", _SentenceEvaluationViewControl_AddChild4);
	return temp;
}

private function _SentenceEvaluationViewControl_HBox2_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	hBoxCorrect = temp;
	temp.verticalScrollPolicy = "off";
	temp.horizontalScrollPolicy = "off";
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxCorrect";
	mx.binding.BindingManager.executeBindings(this, "hBoxCorrect", hBoxCorrect);
	if (!temp.document) temp.document = this;
	temp.addChild(_SentenceEvaluationViewControl_Image2_i());
	temp.addChild(_SentenceEvaluationViewControl_TextExended2_i());
	return temp;
}

private function _SentenceEvaluationViewControl_Image2_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgCorrect = temp;
	temp.id = "imgCorrect";
	mx.binding.BindingManager.executeBindings(this, "imgCorrect", imgCorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _SentenceEvaluationViewControl_TextExended2_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	txtCorrect = temp;
	temp.percentWidth = 100.0;
	temp.selectable = false;
	temp.id = "txtCorrect";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _SentenceEvaluationViewControl_State5_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_SentenceEvaluationViewControl_State5 = temp;
	temp.overrides = [_SentenceEvaluationViewControl_RemoveChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_State5", _SentenceEvaluationViewControl_State5);
	return temp;
}

private function _SentenceEvaluationViewControl_RemoveChild1_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_SentenceEvaluationViewControl_RemoveChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_SentenceEvaluationViewControl_RemoveChild1", _SentenceEvaluationViewControl_RemoveChild1);
	return temp;
}


	//	binding mgmt
    private function _SentenceEvaluationViewControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 50);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                this.width = _sourceFunctionReturnValue;
            },
            "this.width");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _SentenceEvaluationViewControl_Transition1.fromState = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_Transition1.fromState");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _SentenceEvaluationViewControl_Transition1.toState = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_Transition1.toState");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (hBoxCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                showPromptEffect.target = _sourceFunctionReturnValue;
            },
            "showPromptEffect.target");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _SentenceEvaluationViewControl_State1.name = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_State1.name");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _SentenceEvaluationViewControl_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_AddChild1.relativeTo");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 80);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                vBoxContent.width = _sourceFunctionReturnValue;
            },
            "vBoxContent.width");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _SentenceEvaluationViewControl_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_AddChild2.relativeTo");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 80);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                vBoxAnswers.maxWidth = _sourceFunctionReturnValue;
            },
            "vBoxAnswers.maxWidth");
        result[9] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _SentenceEvaluationViewControl_State3.name = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_State3.name");
        result[10] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (vBoxAnswers);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _SentenceEvaluationViewControl_AddChild3.relativeTo = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_AddChild3.relativeTo");
        result[11] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width - 40);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxIncorrect.width = _sourceFunctionReturnValue;
            },
            "hBoxIncorrect.width");
        result[12] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (_fontSize);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                imgIncorrect.width = _sourceFunctionReturnValue;
            },
            "imgIncorrect.width");
        result[13] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (_fontSize);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                imgIncorrect.height = _sourceFunctionReturnValue;
            },
            "imgIncorrect.height");
        result[14] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconIncorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgIncorrect.source = _sourceFunctionReturnValue;
            },
            "imgIncorrect.source");
        result[15] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                stCorrect.name = _sourceFunctionReturnValue;
            },
            "stCorrect.name");
        result[16] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (vBoxAnswers);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _SentenceEvaluationViewControl_AddChild4.relativeTo = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_AddChild4.relativeTo");
        result[17] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width - 40);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxCorrect.width = _sourceFunctionReturnValue;
            },
            "hBoxCorrect.width");
        result[18] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (_fontSize);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                imgCorrect.width = _sourceFunctionReturnValue;
            },
            "imgCorrect.width");
        result[19] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (_fontSize);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                imgCorrect.height = _sourceFunctionReturnValue;
            },
            "imgCorrect.height");
        result[20] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgCorrect.source = _sourceFunctionReturnValue;
            },
            "imgCorrect.source");
        result[21] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_continue);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _SentenceEvaluationViewControl_State5.name = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_State5.name");
        result[22] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _SentenceEvaluationViewControl_State5.basedOn = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_State5.basedOn");
        result[23] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (hBoxIncorrect);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _SentenceEvaluationViewControl_RemoveChild1.target = _sourceFunctionReturnValue;
            },
            "_SentenceEvaluationViewControl_RemoveChild1.target");
        result[24] = binding;

        return result;
    }

    private function _SentenceEvaluationViewControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_edit);
		[Binding(id='1')]
		destination = (ActivityControl.MAX_WIDTH - 50);
		[Binding(id='2')]
		destination = (state_incorrect);
		[Binding(id='3')]
		destination = (state_correct);
		[Binding(id='4')]
		destination = (hBoxCorrect);
		[Binding(id='5')]
		destination = (state_edit);
		[Binding(id='6')]
		destination = (this);
		[Binding(id='7')]
		destination = (ActivityControl.MAX_WIDTH - 80);
		[Binding(id='8')]
		destination = (this);
		[Binding(id='9')]
		destination = (ActivityControl.MAX_WIDTH - 80);
		[Binding(id='10')]
		destination = (state_incorrect);
		[Binding(id='11')]
		destination = (vBoxAnswers);
		[Binding(id='12')]
		destination = (this.width - 40);
		[Binding(id='13')]
		destination = (_fontSize);
		[Binding(id='14')]
		destination = (_fontSize);
		[Binding(id='15')]
		destination = (EmbededData.inctance.iconIncorrect);
		[Binding(id='16')]
		destination = (state_correct);
		[Binding(id='17')]
		destination = (vBoxAnswers);
		[Binding(id='18')]
		destination = (this.width - 40);
		[Binding(id='19')]
		destination = (_fontSize);
		[Binding(id='20')]
		destination = (_fontSize);
		[Binding(id='21')]
		destination = (EmbededData.inctance.iconCorrect);
		[Binding(id='22')]
		destination = (state_continue);
		[Binding(id='23')]
		destination = (state_correct);
		[Binding(id='24')]
		destination = (hBoxIncorrect);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (SentenceEvaluationViewControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
