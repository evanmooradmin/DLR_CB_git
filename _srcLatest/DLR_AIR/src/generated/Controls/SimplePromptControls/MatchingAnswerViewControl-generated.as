
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls
 *	Class: 		MatchingAnswerViewControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\MatchingAnswerViewControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:02 EEST
 */

package Controls.SimplePromptControls
{

import Controls.DropAnswerControl;
import Controls.Enviroment.TextExended;
import Controls.FlowBox.FlowBox;
import Interfaces.IDirectionAnswer;
import Interfaces.IFontStyle;
import Interfaces.IResult;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.containers.HBox;
import mx.controls.Image;
import mx.controls.Text;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.ResizeEvent;
import mx.states.AddChild;
import mx.states.State;
import mx.styles.*;



//	begin class def

public class MatchingAnswerViewControl
	extends mx.containers.Canvas
	implements Interfaces.IDirectionAnswer, Interfaces.IFontStyle, Interfaces.IResult, mx.binding.IBindingClient
{

	//	instance variables
/**
 * @private
 **/
	public var _MatchingAnswerViewControl_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _MatchingAnswerViewControl_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _MatchingAnswerViewControl_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
	public var _MatchingAnswerViewControl_State1 : mx.states.State;

/**
 * @private
 **/
	public var _MatchingAnswerViewControl_State2 : mx.states.State;

/**
 * @private
 **/
	public var _MatchingAnswerViewControl_State3 : mx.states.State;

	[Bindable]
/**
 * @private
 **/
	public var dropAnswer : Controls.DropAnswerControl;

	[Bindable]
/**
 * @private
 **/
	public var hBox : Controls.FlowBox.FlowBox;

	[Bindable]
/**
 * @private
 **/
	public var hBoxCorrect : Controls.FlowBox.FlowBox;

	[Bindable]
/**
 * @private
 **/
	public var hBoxIncorrect : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var img : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var imgCorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var imgIncorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var mainHBox : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var textAfter : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var textCorrect : mx.controls.Text;

	[Bindable]
/**
 * @private
 **/
	public var textIncorrect : mx.controls.Text;

	[Bindable]
/**
 * @private
 **/
	public var textTo : Controls.Enviroment.TextExended;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.HBox
        ,
        id: "mainHBox"
        ,
        stylesFactory: function():void {
          this.verticalAlign = "middle";
        }
        ,
        propertiesFactory: function():Object { return {
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Image
              ,
              id: "img"
            })
          ]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function MatchingAnswerViewControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.verticalScrollPolicy = "off";
		this.horizontalScrollPolicy = "off";
		this.states = [_MatchingAnswerViewControl_State1_i(), _MatchingAnswerViewControl_State2_i(), _MatchingAnswerViewControl_State3_i()];

		//	events
		this.addEventListener("resize", ___MatchingAnswerViewControl_Canvas1_resize);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _MatchingAnswerViewControl_bindingsSetup();
		var watchers:Array = [];

		var target:MatchingAnswerViewControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_MatchingAnswerViewControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 7 - 207

      import Model.FactoryRegExp;
      import mx.events.FlexEvent;
      import Controls.ActivityControl;
      import mx.events.ResizeEvent;
      import Model.EmbededData;
      import Model.Answers.MatchingAnswer;
      import Model.Answers.Answer;
      import Model.Prompts.Prompt;
      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\MatchingAnswerViewControl.mxml
      *
      *  Abstract:
      *     This is visual control for matching answer prompt
      *
      *  Author:
      *     Evgenij Welikij   26-October-2009
      *
      *  Revision History:
      *
      ***************************************************************/


      /**
      * Static
      */


      /**
      * Private members/properties
      */
      private var _answer:MatchingAnswer;
      private var _currentFountSize:int = 0;
      private var _isShowAnswer:Boolean = false;

      private const state_dropAnswer:String = "state_dropAnswer";
      private const state_correct:String = "state_correct";
      private const state_incorrect:String = "state_incorrect";


      /**
      * Private methods
      */

      private function resizeHandler(event:ResizeEvent):void
      {
        hBox.width = this.width - hBox.x;
      
      }

      private function resizeHbox():void
      {
        if (textTo.width + dropAnswer.width + textAfter.width < hBox.width)
        {
          hBox.width = textTo.width + dropAnswer.width + textAfter.width;
        }
      }
      /**
      * Events handler
      */
    

      /**
      * Initialization
      */


      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */
      public virtual function FontName(name:String):void
      {
        textTo.setStyle("fontFamily", name);
        textAfter.setStyle("fontFamily", name);
        textIncorrect.setStyle("fontFamily", name);
        textCorrect.setStyle("fontFamily", name);
        dropAnswer.FontName(name);

      }

      public virtual function FontSize(size:int):void
      {
        textTo.setStyle("fontSize", size);
        textAfter.setStyle("fontSize", size);
        textIncorrect.setStyle("fontSize", size);
        textCorrect.setStyle("fontSize", size);

        imgCorrect.width = size;
        imgCorrect.height = size;
        imgIncorrect.width = size;
        imgIncorrect.height = size;
        dropAnswer.FontSize(size);

        if (this._currentFountSize > size)
            resizeHbox();
        this._currentFountSize = size;

      }

      public virtual function FontColor(color:int):void
      {
        textTo.setStyle("color", color);
        textAfter.setStyle("color", color);
        textIncorrect.setStyle("color", color);
        textCorrect.setStyle("color", color);

        dropAnswer.FontColor(color);
      }

      public virtual function Bold():void
      {
      }

      public virtual function IsComplete():Boolean
      {
        //Используеться пи отключенной опции Check Answer переменной присваевается true когда включено состояние correct
        if (_isShowAnswer == true)
            return true;
        else    
            return dropAnswer.isDrop;
        
      }

      public virtual function Init(answer:Answer):void
      {
        this._answer = answer as MatchingAnswer;

        if (_answer.source)
          img.source = EmbededData.inctance[EmbededData.img + _answer.source];

        if (_answer.existInsertPlace == true)
        {
          textTo.htmlText = answer.textTo;
          textAfter.htmlText = answer.textAfter;
        }
        else
          textTo.htmlText = answer.text;
          //Пробел здесь конечно нужен как овце боян но если его убрать то при размере шрифта 10 пробадает последнее слово так как
          //text нехочет коректно ресайзиться. Задать размер элементу text в этом контроле нельзя поэтому....
          textTo.htmlText +=" ";
          //Устанавливаем вісоту 0 если нет тескта что бі небіло больших пробелов между контейнерами в которіе надо перетаскивать
          if (textTo.htmlText == "" ||  textTo.htmlText == " ")
              textTo.height = 0;
          if (textAfter.htmlText == "" ||  textAfter.htmlText == " ")    
              textAfter.height = 0;
      }

      public virtual function GetText():String
      {
        return dropAnswer.GetText();
      }

      public virtual function SetIncorrect():void
      {
        currentState = state_incorrect;
        textIncorrect.htmlText = textTo.text + ' ' + "<font  color='#" + EmbededData.inctance.iconIncorrectColorHex + "'>" + dropAnswer.GetText() + "</font> "  + ' ' + textAfter.text;
      }

      public virtual function SetCorrect():void
      {
        currentState = state_correct;
        textCorrect.htmlText = textTo.text + ' ' + "<font  color='#" + EmbededData.inctance.iconCorrectColorHex + "'>" + _answer.answer + "</font> " + ' ' + textAfter.text;
        _isShowAnswer = true;
      }

      public virtual function Continue():void
      {
      }

      public virtual function DefaultFont():void
      {
        textTo.setStyle("fontFamily", "Futura");
        textAfter.setStyle("fontFamily", "Futura");
        textCorrect.setStyle("fontFamily", "Futura");
        textIncorrect.setStyle("fontFamily", "Futura");
      }


      /**
      * Public members/properties
      */
      public function setMaxWidthChildren(value:int):void
      {
           hBox.maxWidth = value - hBox.x;
      }


      /**
      * Public methods
      */



    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _MatchingAnswerViewControl_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_MatchingAnswerViewControl_State1 = temp;
	temp.overrides = [_MatchingAnswerViewControl_AddChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_MatchingAnswerViewControl_State1", _MatchingAnswerViewControl_State1);
	return temp;
}

private function _MatchingAnswerViewControl_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_MatchingAnswerViewControl_AddChild1 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_MatchingAnswerViewControl_FlowBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_MatchingAnswerViewControl_AddChild1", _MatchingAnswerViewControl_AddChild1);
	return temp;
}

private function _MatchingAnswerViewControl_FlowBox1_i() : Controls.FlowBox.FlowBox
{
	var temp : Controls.FlowBox.FlowBox = new Controls.FlowBox.FlowBox();
	hBox = temp;
	temp.verticalScrollPolicy = "off";
	temp.horizontalScrollPolicy = "off";
	temp.setStyle("verticalAlign", "middle");
	temp.setStyle("horizontalAlign", "left");
	temp.setStyle("horizontalGap", 0);
	temp.setStyle("verticalGap", 0);
	temp.id = "hBox";
	if (!temp.document) temp.document = this;
	temp.addChild(_MatchingAnswerViewControl_TextExended1_i());
	temp.addChild(_MatchingAnswerViewControl_DropAnswerControl1_i());
	temp.addChild(_MatchingAnswerViewControl_TextExended2_i());
	return temp;
}

private function _MatchingAnswerViewControl_TextExended1_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	textTo = temp;
	temp.id = "textTo";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _MatchingAnswerViewControl_DropAnswerControl1_i() : Controls.DropAnswerControl
{
	var temp : Controls.DropAnswerControl = new Controls.DropAnswerControl();
	dropAnswer = temp;
	temp.id = "dropAnswer";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _MatchingAnswerViewControl_TextExended2_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	textAfter = temp;
	temp.id = "textAfter";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _MatchingAnswerViewControl_State2_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_MatchingAnswerViewControl_State2 = temp;
	temp.overrides = [_MatchingAnswerViewControl_AddChild2_i()];
	mx.binding.BindingManager.executeBindings(this, "_MatchingAnswerViewControl_State2", _MatchingAnswerViewControl_State2);
	return temp;
}

private function _MatchingAnswerViewControl_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_MatchingAnswerViewControl_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_MatchingAnswerViewControl_FlowBox2_i);
	mx.binding.BindingManager.executeBindings(this, "_MatchingAnswerViewControl_AddChild2", _MatchingAnswerViewControl_AddChild2);
	return temp;
}

private function _MatchingAnswerViewControl_FlowBox2_i() : Controls.FlowBox.FlowBox
{
	var temp : Controls.FlowBox.FlowBox = new Controls.FlowBox.FlowBox();
	hBoxCorrect = temp;
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxCorrect";
	mx.binding.BindingManager.executeBindings(this, "hBoxCorrect", hBoxCorrect);
	if (!temp.document) temp.document = this;
	temp.addChild(_MatchingAnswerViewControl_Image1_i());
	temp.addChild(_MatchingAnswerViewControl_Text1_i());
	return temp;
}

private function _MatchingAnswerViewControl_Image1_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgCorrect = temp;
	temp.id = "imgCorrect";
	mx.binding.BindingManager.executeBindings(this, "imgCorrect", imgCorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _MatchingAnswerViewControl_Text1_i() : mx.controls.Text
{
	var temp : mx.controls.Text = new mx.controls.Text();
	textCorrect = temp;
	temp.selectable = false;
	temp.id = "textCorrect";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _MatchingAnswerViewControl_State3_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_MatchingAnswerViewControl_State3 = temp;
	temp.overrides = [_MatchingAnswerViewControl_AddChild3_i()];
	mx.binding.BindingManager.executeBindings(this, "_MatchingAnswerViewControl_State3", _MatchingAnswerViewControl_State3);
	return temp;
}

private function _MatchingAnswerViewControl_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_MatchingAnswerViewControl_AddChild3 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_MatchingAnswerViewControl_HBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_MatchingAnswerViewControl_AddChild3", _MatchingAnswerViewControl_AddChild3);
	return temp;
}

private function _MatchingAnswerViewControl_HBox1_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	hBoxIncorrect = temp;
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxIncorrect";
	if (!temp.document) temp.document = this;
	temp.addChild(_MatchingAnswerViewControl_Image2_i());
	temp.addChild(_MatchingAnswerViewControl_Text2_i());
	return temp;
}

private function _MatchingAnswerViewControl_Image2_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgIncorrect = temp;
	temp.id = "imgIncorrect";
	mx.binding.BindingManager.executeBindings(this, "imgIncorrect", imgIncorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _MatchingAnswerViewControl_Text2_i() : mx.controls.Text
{
	var temp : mx.controls.Text = new mx.controls.Text();
	textIncorrect = temp;
	temp.selectable = false;
	temp.id = "textIncorrect";
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function ___MatchingAnswerViewControl_Canvas1_resize(event:mx.events.ResizeEvent):void
{
	resizeHandler(event)
}


	//	binding mgmt
    private function _MatchingAnswerViewControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_dropAnswer);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_dropAnswer);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _MatchingAnswerViewControl_State1.name = _sourceFunctionReturnValue;
            },
            "_MatchingAnswerViewControl_State1.name");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (mainHBox);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _MatchingAnswerViewControl_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_MatchingAnswerViewControl_AddChild1.relativeTo");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _MatchingAnswerViewControl_State2.name = _sourceFunctionReturnValue;
            },
            "_MatchingAnswerViewControl_State2.name");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (mainHBox);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _MatchingAnswerViewControl_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_MatchingAnswerViewControl_AddChild2.relativeTo");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 50);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxCorrect.maxWidth = _sourceFunctionReturnValue;
            },
            "hBoxCorrect.maxWidth");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgCorrect.source = _sourceFunctionReturnValue;
            },
            "imgCorrect.source");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _MatchingAnswerViewControl_State3.name = _sourceFunctionReturnValue;
            },
            "_MatchingAnswerViewControl_State3.name");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (mainHBox);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _MatchingAnswerViewControl_AddChild3.relativeTo = _sourceFunctionReturnValue;
            },
            "_MatchingAnswerViewControl_AddChild3.relativeTo");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconIncorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgIncorrect.source = _sourceFunctionReturnValue;
            },
            "imgIncorrect.source");
        result[9] = binding;

        return result;
    }

    private function _MatchingAnswerViewControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_dropAnswer);
		[Binding(id='1')]
		destination = (state_dropAnswer);
		[Binding(id='2')]
		destination = (mainHBox);
		[Binding(id='3')]
		destination = (state_correct);
		[Binding(id='4')]
		destination = (mainHBox);
		[Binding(id='5')]
		destination = (ActivityControl.MAX_WIDTH - 50);
		[Binding(id='6')]
		destination = (EmbededData.inctance.iconCorrect);
		[Binding(id='7')]
		destination = (state_incorrect);
		[Binding(id='8')]
		destination = (mainHBox);
		[Binding(id='9')]
		destination = (EmbededData.inctance.iconIncorrect);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (MatchingAnswerViewControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
