
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls.FillInTheBlanks
 *	Class: 		FillInTheBlanksPromptViewControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\FillInTheBlanks\FillInTheBlanksPromptViewControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:04 EEST
 */

package Controls.SimplePromptControls.FillInTheBlanks
{

import Controls.Enviroment.TextExended;
import Controls.FlowBox.FlowBox;
import Interfaces.IDirectionPrompt;
import Interfaces.IFontStyle;
import Interfaces.IResult;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.display.DisplayObject;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Image;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.effects.Blur;
import mx.effects.Parallel;
import mx.effects.Resize;
import mx.effects.Sequence;
import mx.events.FlexEvent;
import mx.states.AddChild;
import mx.states.RemoveChild;
import mx.states.State;
import mx.states.Transition;
import mx.styles.*;



//	begin class def

public class FillInTheBlanksPromptViewControl
	extends mx.containers.Canvas
	implements Interfaces.IDirectionPrompt, Interfaces.IFontStyle, Interfaces.IResult, mx.binding.IBindingClient
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var HbIncorrectContainer : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var VbContainer : mx.containers.VBox;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_RemoveChild1 : mx.states.RemoveChild;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_RemoveChild2 : mx.states.RemoveChild;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_RemoveChild3 : mx.states.RemoveChild;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_State1 : mx.states.State;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_State2 : mx.states.State;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_State3 : mx.states.State;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_State4 : mx.states.State;

/**
 * @private
 **/
	public var _FillInTheBlanksPromptViewControl_Transition1 : mx.states.Transition;

	[Bindable]
/**
 * @private
 **/
	public var flowBox : Controls.FlowBox.FlowBox;

	[Bindable]
/**
 * @private
 **/
	public var hBoxCorrect : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var imgCorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var imgIncorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var lbCorrect : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var lbIncorrect : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var showPromptEffect : mx.effects.Parallel;

	[Bindable]
/**
 * @private
 **/
	public var showResizeEffect : mx.effects.Resize;

	[Bindable]
/**
 * @private
 **/
	public var vbStrings : mx.containers.VBox;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function FillInTheBlanksPromptViewControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.transitions = [_FillInTheBlanksPromptViewControl_Transition1_i()];
		this.states = [_FillInTheBlanksPromptViewControl_State1_i(), _FillInTheBlanksPromptViewControl_State2_i(), _FillInTheBlanksPromptViewControl_State3_i(), _FillInTheBlanksPromptViewControl_State4_i()];

		//	events
		this.addEventListener("creationComplete", ___FillInTheBlanksPromptViewControl_Canvas1_creationComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _FillInTheBlanksPromptViewControl_bindingsSetup();
		var watchers:Array = [];

		var target:FillInTheBlanksPromptViewControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_FillInTheBlanks_FillInTheBlanksPromptViewControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 7 - 369

      import mx.controls.Text;
      import flash.text.engine.TextElement;
      import mx.controls.TextArea;
      import mx.controls.TextInput;
      import Controls.Enviroment.TextExended;
      import Model.EnumRegExp;
      import Model.FactoryRegExp;
      import Controls.ActivityControl;
      import mx.core.UIComponent;
      import mx.controls.Label;
      import mx.events.FlexEvent;
      import Controls.SelectableLabel;
      import Model.EmbededData;
      import Model.StateTypes;
      import Model.Events.StateEvent;
      import Model.Prompts.FillInTheBlanks;
      import Model.Prompts.Prompt;
      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\FillInTheBlanks\FillInTheBlanksPromptViewControl.mxml
      *
      *  Abstract:
      *     This is view control for fill in the blanks
      *
      *  Author:
      *     Evgenij Welikij   03-November-2009
      *
      *  Revision History:
      *
      ***************************************************************/


      /**
      * Static
      */


      /**
      * Private members/properties
      */
      protected var _prompt:FillInTheBlanks;
      protected var _isContinue:Boolean = false;


      private const state_edit:String = "state_edit";
      private const state_correct:String = "state_correct";
      private const state_incorrect:String = "state_incorrect";
      private const state_only_correct:String = "state_only_correct";

      private var _fontName:String;
      private var _fontSize:int;
      private var _txtInputs:Vector.<TextInput> = new Vector.<TextInput>();

      /**
      * Private methods
      */
      private function TextInputMaxWidth():void
      {
        if (_prompt != null)
        {
           for each (var item:UIComponent in flowBox.getChildren())
            {
             if (item is TextInput)
             {
               item.width = item.measureText(_prompt.answer + "w").width;
               if (item.width < 50)
                  item.width = 100;
             }
           }
        }
      }


      /**
      * Events handler
      */
      private function UpdateComplete_controlHandler(event:FlexEvent):void
      {
        // делаем label ровно по длинне текста
        var label:Text = event.currentTarget as Text;
        var lineMetrics:TextLineMetrics = label.measureText(label.text);
        if (label.text != " " && label.text != "")
        {
           // label.width = lineMetrics.width;
           // label.width = lineMetrics.width + lineMetrics.x * 4;
        }
        else
            label.width = lineMetrics.width;
      }

      private function UpdateComplete_txtInputHandler(event:FlexEvent):void
      {
        var txtInput:TextInput = event.currentTarget as TextInput;
        var width:int = txtInput.measureText(_prompt.answer).width;

        txtInput.minWidth = txtInput.measureText("1234567").width;
        txtInput.maxWidth = txtInput.measureText("12345678901234567890").width;

        if (width >= txtInput.minWidth && width <= txtInput.maxWidth)
          txtInput.width = width;
        else if (width < txtInput.minWidth)
          txtInput.width = txtInput.minWidth;
        else if (width > txtInput.maxWidth)
          txtInput.width = txtInput.maxWidth;
      }

      private  function creationCompleteHandler(event:FlexEvent):void
      {
        //Применяем стили к элементам, по другому не работало
         flowBox.setStyle("fontFamily", this._fontName);
         flowBox.setStyle("fontSize", this._fontSize);
         TextInputMaxWidth();
      }

      /**
      * Initialization
      */


      /**
      * Constructor
      */



      /**
      * Virtuals methods
      */
      public virtual function FontName(name:String):void
      {
        this._fontName = name;
        flowBox.setStyle("fontFamily", name);
        lbIncorrect.setStyle("fontFamily", name);
        lbCorrect.setStyle("fontFamily", name);
        vbStrings.setStyle("fontFamily", name);

        for each (var chaild:UIComponent in flowBox.getChildren())
        {
           if (chaild is TextInput)
                chaild.setStyle("fontFamily", "EMComic");
        }

        TextInputMaxWidth();
      }

      public virtual function FontSize(size:int):void
      {
        this._fontSize = size;
        flowBox.setStyle("fontSize", size);
        lbCorrect.setStyle("fontSize", size);
        lbIncorrect.setStyle("fontSize", size);
        vbStrings.setStyle("fontSize", size);

        imgCorrect.width = size;
        imgCorrect.height = size;
        imgIncorrect.width = size;
        imgIncorrect.height = size;

        TextInputMaxWidth();
      }

      public virtual function FontColor(color:int):void
      {
        flowBox.setStyle("color", color);
        lbCorrect.setStyle("color", color);
        lbIncorrect.setStyle("color", color);

        for each (var item:Label in vbStrings.getChildren())
          item.setStyle("color", color);
      }

      public virtual function Bold():void
      {
      }

      public virtual function IsComplete():Boolean
      {
        for each (var item:UIComponent in flowBox.getChildren())
        {
         if (item is TextInput && (item as TextInput).text == "")
         {
   //     if (textArea.text != "")
            return false;
         }
        }
        return true;
      }



      public virtual function Init(prompt:Prompt):void
      {
        this._prompt = prompt as FillInTheBlanks;
        if (prompt.existInsertPlace)
        {
          var separatorPattern:RegExp = new RegExp(Prompt.separatorPatternString, "g");

          // заменяем все переносы каретки на "<br/>"
          var textTemp:String = prompt.text;

          textTemp = textTemp.replace(/[\r\n]|[\n\r]/g, FactoryRegExp.BR);

          textTemp = FactoryRegExp.AddTagToEachWord(FactoryRegExp.instance.U_start(EnumRegExp.G), FactoryRegExp.instance.U_finish(EnumRegExp.G),
                                                                FactoryRegExp.U_START, FactoryRegExp.U_FINISH, textTemp);
          textTemp = FactoryRegExp.AddTagToEachWord(FactoryRegExp.instance.B_start(EnumRegExp.G), FactoryRegExp.instance.B_finish(EnumRegExp.G),
                                                                FactoryRegExp.B_START, FactoryRegExp.B_FINISH, textTemp);

          var countTextInputs:int = textTemp.split(separatorPattern).length - 1;
          var parts:Array = textTemp.split(separatorPattern);

          for each (var part:String in parts)
          {
              part = part.replace(FactoryRegExp.instance.BR(EnumRegExp.G), "\n");

              var words:Array = part.split(" ");
              var text:TextExended = null;

              for each (var word:String in words)
              {
                text = new TextExended();
                text.addEventListener(FlexEvent.UPDATE_COMPLETE, UpdateComplete_controlHandler);
                text.selectable = false;

                if (word == "" || word == " ")
                    text.HtmlText += " ";
                else
                    text.HtmlText = word == "" ? " " : word;
                flowBox.addChild(text);
              }
              // Создаем поля для ввода текста
              if (countTextInputs)
              {
                var txtInput:TextInput = new TextInput();
                txtInput.addEventListener(FlexEvent.UPDATE_COMPLETE, UpdateComplete_txtInputHandler);

                _txtInputs.push(txtInput);
                flowBox.addChild(txtInput);
                countTextInputs--;
              }
            }
        }
        else
        {
          var label:TextExended = new TextExended();
          label.selectable = false;
          label.htmlText = prompt.text;

          // удаление всех переносов каретки
          label.htmlText = label.htmlText.replace(/[\r\n]|[\n\r]/g, "");

          label.maxWidth = this.width - 30;
          vbStrings.addChild(label);
          txtInput = new TextInput();
          flowBox.addChild(txtInput);
        }
       }

      public virtual function GetText():String
      {
        for each (var item:UIComponent in flowBox.getChildren())
        {
         if (item is TextInput && (item as TextInput).text != "")
             return (item as TextInput).text;
        }
        return '';
      }

      public virtual function SetCorrect():void
      {
        if (!_isContinue)
        {
          if (currentState == state_edit)
              currentState = state_only_correct;
          else
             currentState = state_correct;

          lbCorrect.htmlText = "";

          for each (var item:Label in vbStrings.getChildren())
            lbCorrect.htmlText += item.htmlText + "\n";

          for each (var chaild:UIComponent in flowBox.getChildren())
           {
             if (chaild is TextExended)
                 lbCorrect.htmlText += (chaild as TextExended).HtmlText + " ";
             else if (chaild is TextInput)
                //выделяем введенный пользователем текст красным цветом
                lbCorrect.htmlText +=  '<font face="EMComic" color="#' + SelectableLabel.IntToHex(EmbededData.inctance.iconCorrectColor.toString()) + '">'+ _prompt.answer + "</font> ";
           }

          lbCorrect.htmlText = lbCorrect.htmlText.replace(new RegExp('(<\\s*?/u\\s*?>)(\\s+?)(<\\s*?u\\s*?>)','g'),' ');

          // заменяем все переносы каретки на "<br/>"
          lbCorrect.htmlText = lbCorrect.htmlText.replace(/[\r\n]|[\n\r]/g, FactoryRegExp.BR);
          lbCorrect.htmlText = FactoryRegExp.NormalazeString(lbCorrect.htmlText);
          lbCorrect.htmlText = lbCorrect.htmlText.replace(FactoryRegExp.instance.BR_spaces(EnumRegExp.G), "\n");
        }
      }

      public virtual function SetIncorrect():void
      {
        if (!_isContinue)
        {
          currentState = state_incorrect;

          lbIncorrect.htmlText = "";

          for each (var item:Label in vbStrings.getChildren())
            lbIncorrect.htmlText += item.htmlText + "\n";

          for each (var chaild:UIComponent in flowBox.getChildren())
          {
            if (chaild is TextExended)
              lbIncorrect.htmlText += (chaild as TextExended).HtmlText + " ";
            else if (chaild is TextInput)
              //выделяем введенный пользователем текст красным цветом
              lbIncorrect.htmlText +=  '<font face="EMComic" color="#' + SelectableLabel.IntToHex(EmbededData.inctance.iconIncorrectColor.toString()) + '">'+ (chaild as TextInput).text + "</font> ";
          }
          // заменяем все переносы каретки на "<br/>"
          lbIncorrect.htmlText = lbIncorrect.htmlText.replace(/[\r\n]|[\n\r]/g, FactoryRegExp.BR);
          lbIncorrect.htmlText = lbIncorrect.htmlText.replace(new RegExp('(<\\s*?/u\\s*?>)(\\s+?)(<\\s*?u\\s*?>)','g'),' ');
          lbIncorrect.htmlText = FactoryRegExp.NormalazeString(lbIncorrect.htmlText);
          lbIncorrect.htmlText = lbIncorrect.htmlText.replace(FactoryRegExp.instance.BR_spaces(EnumRegExp.G), "\n");
       }
      }

      public virtual function Continue():void
      {
        _isContinue = true;
        this.currentState = state_only_correct;
      }

      public virtual function DefaultFont():void
      {
        this._fontName = "Futura";
        flowBox.setStyle("fontFamily", "Futura");
        lbCorrect.setStyle("fontFamily", "Futura");
        lbIncorrect.setStyle("fontFamily", "Futura");

        vbStrings.setStyle("fontFamily", "Futura");

        for each (var chaild:UIComponent in flowBox.getChildren())
        {
           if (chaild is TextInput)
                chaild.setStyle("fontFamily", "EMComic");
        }
      }


      /**
      * Public members/properties
      */


      /**
      * Public methods
      */



    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _FillInTheBlanksPromptViewControl_Transition1_i() : mx.states.Transition
{
	var temp : mx.states.Transition = new mx.states.Transition();
	_FillInTheBlanksPromptViewControl_Transition1 = temp;
	temp.effect = _FillInTheBlanksPromptViewControl_Parallel1_i();
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_Transition1", _FillInTheBlanksPromptViewControl_Transition1);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Parallel1_i() : mx.effects.Parallel
{
	var temp : mx.effects.Parallel = new mx.effects.Parallel();
	showPromptEffect = temp;
	temp.children = [_FillInTheBlanksPromptViewControl_Resize1_i(), _FillInTheBlanksPromptViewControl_Sequence1_c()];
	mx.binding.BindingManager.executeBindings(this, "showPromptEffect", showPromptEffect);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Resize1_i() : mx.effects.Resize
{
	var temp : mx.effects.Resize = new mx.effects.Resize();
	showResizeEffect = temp;
	temp.duration = 300;
	temp.heightFrom = 0;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Sequence1_c() : mx.effects.Sequence
{
	var temp : mx.effects.Sequence = new mx.effects.Sequence();
	temp.children = [_FillInTheBlanksPromptViewControl_Blur1_c(), _FillInTheBlanksPromptViewControl_Blur2_c()];
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Blur1_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 1.0;
	temp.blurYTo = 20.0;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Blur2_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 20.0;
	temp.blurYTo = 1;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_FillInTheBlanksPromptViewControl_State1 = temp;
	temp.overrides = [_FillInTheBlanksPromptViewControl_AddChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_State1", _FillInTheBlanksPromptViewControl_State1);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_FillInTheBlanksPromptViewControl_AddChild1 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_FillInTheBlanksPromptViewControl_VBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_AddChild1", _FillInTheBlanksPromptViewControl_AddChild1);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_VBox1_i() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	VbContainer = temp;
	temp.horizontalScrollPolicy = "off";
	temp.setStyle("verticalGap", 0);
	temp.id = "VbContainer";
	mx.binding.BindingManager.executeBindings(this, "VbContainer", VbContainer);
	if (!temp.document) temp.document = this;
	temp.addChild(_FillInTheBlanksPromptViewControl_VBox2_i());
	temp.addChild(_FillInTheBlanksPromptViewControl_FlowBox1_i());
	return temp;
}

private function _FillInTheBlanksPromptViewControl_VBox2_i() : mx.containers.VBox
{
	var temp : mx.containers.VBox = new mx.containers.VBox();
	vbStrings = temp;
	temp.percentWidth = 100.0;
	temp.setStyle("verticalGap", 0);
	temp.id = "vbStrings";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_FlowBox1_i() : Controls.FlowBox.FlowBox
{
	var temp : Controls.FlowBox.FlowBox = new Controls.FlowBox.FlowBox();
	flowBox = temp;
	temp.horizontalScrollPolicy = "off";
	temp.verticalScrollPolicy = "off";
	temp.setStyle("horizontalGap", 0);
	temp.id = "flowBox";
	mx.binding.BindingManager.executeBindings(this, "flowBox", flowBox);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_State2_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_FillInTheBlanksPromptViewControl_State2 = temp;
	temp.overrides = [_FillInTheBlanksPromptViewControl_AddChild2_i(), _FillInTheBlanksPromptViewControl_RemoveChild1_i(), _FillInTheBlanksPromptViewControl_RemoveChild2_i()];
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_State2", _FillInTheBlanksPromptViewControl_State2);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_FillInTheBlanksPromptViewControl_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_FillInTheBlanksPromptViewControl_HBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_AddChild2", _FillInTheBlanksPromptViewControl_AddChild2);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_HBox1_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	HbIncorrectContainer = temp;
	temp.setStyle("verticalAlign", "middle");
	temp.id = "HbIncorrectContainer";
	mx.binding.BindingManager.executeBindings(this, "HbIncorrectContainer", HbIncorrectContainer);
	if (!temp.document) temp.document = this;
	temp.addChild(_FillInTheBlanksPromptViewControl_Image1_i());
	temp.addChild(_FillInTheBlanksPromptViewControl_TextExended1_i());
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Image1_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgIncorrect = temp;
	temp.id = "imgIncorrect";
	mx.binding.BindingManager.executeBindings(this, "imgIncorrect", imgIncorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_TextExended1_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	lbIncorrect = temp;
	temp.selectable = false;
	temp.id = "lbIncorrect";
	mx.binding.BindingManager.executeBindings(this, "lbIncorrect", lbIncorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_RemoveChild1_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_FillInTheBlanksPromptViewControl_RemoveChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_RemoveChild1", _FillInTheBlanksPromptViewControl_RemoveChild1);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_RemoveChild2_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_FillInTheBlanksPromptViewControl_RemoveChild2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_RemoveChild2", _FillInTheBlanksPromptViewControl_RemoveChild2);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_State3_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_FillInTheBlanksPromptViewControl_State3 = temp;
	temp.overrides = [_FillInTheBlanksPromptViewControl_AddChild3_i()];
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_State3", _FillInTheBlanksPromptViewControl_State3);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_FillInTheBlanksPromptViewControl_AddChild3 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_FillInTheBlanksPromptViewControl_HBox2_i);
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_AddChild3", _FillInTheBlanksPromptViewControl_AddChild3);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_HBox2_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	hBoxCorrect = temp;
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxCorrect";
	mx.binding.BindingManager.executeBindings(this, "hBoxCorrect", hBoxCorrect);
	if (!temp.document) temp.document = this;
	temp.addChild(_FillInTheBlanksPromptViewControl_Image2_i());
	temp.addChild(_FillInTheBlanksPromptViewControl_TextExended2_i());
	return temp;
}

private function _FillInTheBlanksPromptViewControl_Image2_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgCorrect = temp;
	temp.id = "imgCorrect";
	mx.binding.BindingManager.executeBindings(this, "imgCorrect", imgCorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_TextExended2_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	lbCorrect = temp;
	temp.selectable = false;
	temp.setStyle("color", 15027785);
	temp.id = "lbCorrect";
	mx.binding.BindingManager.executeBindings(this, "lbCorrect", lbCorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _FillInTheBlanksPromptViewControl_State4_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_FillInTheBlanksPromptViewControl_State4 = temp;
	temp.overrides = [_FillInTheBlanksPromptViewControl_RemoveChild3_i()];
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_State4", _FillInTheBlanksPromptViewControl_State4);
	return temp;
}

private function _FillInTheBlanksPromptViewControl_RemoveChild3_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_FillInTheBlanksPromptViewControl_RemoveChild3 = temp;
	mx.binding.BindingManager.executeBindings(this, "_FillInTheBlanksPromptViewControl_RemoveChild3", _FillInTheBlanksPromptViewControl_RemoveChild3);
	return temp;
}

/**
 * @private
 **/
public function ___FillInTheBlanksPromptViewControl_Canvas1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler(event)
}


	//	binding mgmt
    private function _FillInTheBlanksPromptViewControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 60);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                this.width = _sourceFunctionReturnValue;
            },
            "this.width");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_Transition1.fromState = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_Transition1.fromState");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_Transition1.toState = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_Transition1.toState");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (hBoxCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                showPromptEffect.target = _sourceFunctionReturnValue;
            },
            "showPromptEffect.target");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State1.name = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State1.name");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _FillInTheBlanksPromptViewControl_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_AddChild1.relativeTo");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                VbContainer.width = _sourceFunctionReturnValue;
            },
            "VbContainer.width");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                VbContainer.maxWidth = _sourceFunctionReturnValue;
            },
            "VbContainer.maxWidth");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                flowBox.maxWidth = _sourceFunctionReturnValue;
            },
            "flowBox.maxWidth");
        result[9] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State2.name = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State2.name");
        result[10] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State2.basedOn = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State2.basedOn");
        result[11] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (VbContainer);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _FillInTheBlanksPromptViewControl_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_AddChild2.relativeTo");
        result[12] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (VbContainer.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                HbIncorrectContainer.width = _sourceFunctionReturnValue;
            },
            "HbIncorrectContainer.width");
        result[13] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconIncorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgIncorrect.source = _sourceFunctionReturnValue;
            },
            "imgIncorrect.source");
        result[14] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (HbIncorrectContainer.width - imgIncorrect.width - 10);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                lbIncorrect.maxWidth = _sourceFunctionReturnValue;
            },
            "lbIncorrect.maxWidth");
        result[15] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (flowBox);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _FillInTheBlanksPromptViewControl_RemoveChild1.target = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_RemoveChild1.target");
        result[16] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (vbStrings);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _FillInTheBlanksPromptViewControl_RemoveChild2.target = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_RemoveChild2.target");
        result[17] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State3.name = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State3.name");
        result[18] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State3.basedOn = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State3.basedOn");
        result[19] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (VbContainer);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _FillInTheBlanksPromptViewControl_AddChild3.relativeTo = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_AddChild3.relativeTo");
        result[20] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (VbContainer.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxCorrect.width = _sourceFunctionReturnValue;
            },
            "hBoxCorrect.width");
        result[21] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgCorrect.source = _sourceFunctionReturnValue;
            },
            "imgCorrect.source");
        result[22] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (hBoxCorrect.width - imgCorrect.width - 10);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                lbCorrect.width = _sourceFunctionReturnValue;
            },
            "lbCorrect.width");
        result[23] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_only_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State4.name = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State4.name");
        result[24] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _FillInTheBlanksPromptViewControl_State4.basedOn = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_State4.basedOn");
        result[25] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (HbIncorrectContainer);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _FillInTheBlanksPromptViewControl_RemoveChild3.target = _sourceFunctionReturnValue;
            },
            "_FillInTheBlanksPromptViewControl_RemoveChild3.target");
        result[26] = binding;

        return result;
    }

    private function _FillInTheBlanksPromptViewControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_edit);
		[Binding(id='1')]
		destination = (ActivityControl.MAX_WIDTH - 60);
		[Binding(id='2')]
		destination = (state_incorrect);
		[Binding(id='3')]
		destination = (state_correct);
		[Binding(id='4')]
		destination = (hBoxCorrect);
		[Binding(id='5')]
		destination = (state_edit);
		[Binding(id='6')]
		destination = (this);
		[Binding(id='7')]
		destination = (this.width);
		[Binding(id='8')]
		destination = (this.width);
		[Binding(id='9')]
		destination = (this.width);
		[Binding(id='10')]
		destination = (state_incorrect);
		[Binding(id='11')]
		destination = (state_edit);
		[Binding(id='12')]
		destination = (VbContainer);
		[Binding(id='13')]
		destination = (VbContainer.width);
		[Binding(id='14')]
		destination = (EmbededData.inctance.iconIncorrect);
		[Binding(id='15')]
		destination = (HbIncorrectContainer.width - imgIncorrect.width - 10);
		[Binding(id='16')]
		destination = (flowBox);
		[Binding(id='17')]
		destination = (vbStrings);
		[Binding(id='18')]
		destination = (state_correct);
		[Binding(id='19')]
		destination = (state_incorrect);
		[Binding(id='20')]
		destination = (VbContainer);
		[Binding(id='21')]
		destination = (VbContainer.width);
		[Binding(id='22')]
		destination = (EmbededData.inctance.iconCorrect);
		[Binding(id='23')]
		destination = (hBoxCorrect.width - imgCorrect.width - 10);
		[Binding(id='24')]
		destination = (state_only_correct);
		[Binding(id='25')]
		destination = (state_correct);
		[Binding(id='26')]
		destination = (HbIncorrectContainer);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (FillInTheBlanksPromptViewControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
