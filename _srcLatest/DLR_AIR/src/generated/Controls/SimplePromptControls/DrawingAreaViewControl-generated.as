
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls
 *	Class: 		DrawingAreaViewControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\DrawingAreaViewControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:03 EEST
 */

package Controls.SimplePromptControls
{

import Interfaces.IDirectionPrompt;
import Interfaces.IFontStyle;
import Interfaces.IResult;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.display.DisplayObject;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.containers.VBox;
import mx.controls.Button;
import mx.controls.Text;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.states.AddChild;
import mx.states.RemoveChild;
import mx.states.SetProperty;
import mx.states.SetStyle;
import mx.states.State;
import mx.styles.*;
import mx.styles.IStyleClient;



//	begin class def

public class DrawingAreaViewControl
	extends mx.containers.Canvas
	implements Interfaces.IDirectionPrompt, Interfaces.IFontStyle, Interfaces.IResult, mx.binding.IBindingClient
{

	//	instance variables
/**
 * @private
 **/
	public var _DrawingAreaViewControl_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_RemoveChild1 : mx.states.RemoveChild;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_SetProperty1 : mx.states.SetProperty;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_SetProperty2 : mx.states.SetProperty;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_SetStyle1 : mx.states.SetStyle;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_State1 : mx.states.State;

/**
 * @private
 **/
	public var _DrawingAreaViewControl_State3 : mx.states.State;

	[Bindable]
/**
 * @private
 **/
	public var btnClear : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var canvContainer : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var canvDrawing : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var canvDrawingHolder : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var canvNoDrawing : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var canvTitle : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var stateDrawing : mx.states.State;

	[Bindable]
/**
 * @private
 **/
	public var txtTitle : mx.controls.Text;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VBox
        ,
        propertiesFactory: function():Object { return {
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.controls.Text
              ,
              id: "txtTitle"
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                selectable: false
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Canvas
              ,
              id: "canvContainer"
              ,
              propertiesFactory: function():Object { return {
                verticalScrollPolicy: "off",
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.Canvas
                    ,
                    id: "canvDrawingHolder"
                    ,
                    propertiesFactory: function():Object { return {
                      percentWidth: 100.0,
                      height: 290
                    }}
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.Canvas
                    ,
                    id: "canvTitle"
                  })
                ,
                  new mx.core.UIComponentDescriptor({
                    type: mx.controls.Button
                    ,
                    id: "btnClear"
                    ,
                    events: {
                      click: "__btnClear_click",
                      rollOver: "__btnClear_rollOver",
                      rollOut: "__btnClear_rollOut"
                    }
                    ,
                    stylesFactory: function():void {
                      this.right = "25";
                    }
                    ,
                    propertiesFactory: function():Object { return {
                      label: "Clear",
                      y: 10,
                      styleName: "button1"
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function DrawingAreaViewControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.verticalScrollPolicy = "off";
		this.horizontalScrollPolicy = "off";
		this.states = [_DrawingAreaViewControl_State1_i(), _DrawingAreaViewControl_State2_i(), _DrawingAreaViewControl_State3_i()];

		//	events

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _DrawingAreaViewControl_bindingsSetup();
		var watchers:Array = [];

		var target:DrawingAreaViewControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_DrawingAreaViewControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 5 - 194

      import mx.events.FlexEvent;
      import mx.managers.CursorManager;
      import mx.validators.EmailValidator;
      import Model.EmbededData;
      import Controls.ActivityControl;
      import Model.Prompts.Prompt;
      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\DrawingAreaViewControl.mxml
      *
      *  Abstract:
      *     This is visual control for drawing area prompt
      *
      *  Author:
      *     Evgenij Welikij   04-January-2010
      *
      *  Revision History:
      *
      ***************************************************************/


      /**
      * Static
      */



      /**
      * Private members/properties
      */
      private var _lastPoint:Point;

      private var _pencilCursor:Class = EmbededData.inctance.pencilIcon;
      private var _fingerCursor:Class = EmbededData.inctance.fingerIcon;
      private var _cursorID:int;

      private const state_relatedPrompt:String = "state_relatedPrompt";
      private const state_drawing:String = "state_drawing";
      private const state_continue:String = "state_continue";


      /**
      * Private methods
      */


      /**
      * Events handler
      */
      private function MouseDown_canvDrawingHandler(event:MouseEvent):void
      {
        _lastPoint = new Point(event.localX, event.localY);
      }

      private function MouseUp_canvDrawingHandler(event:MouseEvent):void
      {
        _lastPoint = null;
      }

      private function MouseMove_canvDrawingHandler(event:MouseEvent):void
      {
        if (_lastPoint)
        {
          canvDrawing.graphics.lineStyle(1);
          canvDrawing.graphics.moveTo(_lastPoint.x, _lastPoint.y);
          canvDrawing.graphics.lineTo(event.localX, event.localY);
          _lastPoint = new Point(event.localX, event.localY);
        }
      }

      private function mouseOver_canvDrawingHandler():void
      {
        _cursorID = cursorManager.setCursor(_pencilCursor);
        cursorManager.currentCursorYOffset = -34;
      }

      private function mouseOut_canvDrawingHandler():void
      {
        cursorManager.removeCursor(_cursorID);
      }

      private function Click_btnClearHandler(event:MouseEvent):void
      {
        canvDrawing.graphics.clear();
      }

      private function rollOver_btnClearHandler(event:MouseEvent):void
      {
        _cursorID = CursorManager.setCursor(_fingerCursor);
      }

      private function rollOut_btnClearHandler(event:MouseEvent):void
      {
        CursorManager.removeCursor(_cursorID);
      }

      private function enterState_stateContinueHandler(event:FlexEvent):void
      {
        var bitmapData:BitmapData = new BitmapData(canvDrawing.width, canvDrawing.height);
        var matrix:Matrix = new Matrix();
        bitmapData.draw(canvDrawing, matrix);

        canvNoDrawing.graphics.clear();
        canvNoDrawing.graphics.beginBitmapFill(bitmapData, matrix);
        canvNoDrawing.graphics.drawRect(0, 0, bitmapData.width, bitmapData.height);
        canvNoDrawing.graphics.endFill();
      }


      /**
      * Initialization
      */


      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */
      public virtual function FontName(name:String):void
      {
        txtTitle.setStyle("fontFamily", name);
      }

      public virtual function FontSize(size:int):void
      {
        txtTitle.setStyle("fontSize", size);
      }

      public virtual function FontColor(color:int):void
      {
        txtTitle.setStyle("color", color);
      }

      public virtual function Bold():void
      {
      }

      public virtual function IsComplete():Boolean
      {
        return true;
      }

      public virtual function Init(prompt:Prompt):void
      {
        txtTitle.htmlText = prompt.text;
        if (prompt.relatedPromptID != 0)
          stateDrawing.basedOn = state_relatedPrompt;
      }

      public virtual function GetText():String
      {
        return "";
      }

      public virtual function SetCorrect():void
      {
      }

      public virtual function SetIncorrect():void
      {
      }

      public virtual function Continue():void
      {
        currentState = state_continue;
      }

      public virtual function DefaultFont():void
      {
        txtTitle.setStyle("fontFamily", "Futura");
      }


      /**
      * Public members/properties
      */


      /**
      * Public methods
      */


    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _DrawingAreaViewControl_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_DrawingAreaViewControl_State1 = temp;
	temp.overrides = [_DrawingAreaViewControl_RemoveChild1_i(), _DrawingAreaViewControl_AddChild1_i(), _DrawingAreaViewControl_SetStyle1_i(), _DrawingAreaViewControl_SetProperty1_i()];
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_State1", _DrawingAreaViewControl_State1);
	return temp;
}

private function _DrawingAreaViewControl_RemoveChild1_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_DrawingAreaViewControl_RemoveChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_RemoveChild1", _DrawingAreaViewControl_RemoveChild1);
	return temp;
}

private function _DrawingAreaViewControl_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_DrawingAreaViewControl_AddChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_AddChild1", _DrawingAreaViewControl_AddChild1);
	return temp;
}

private function _DrawingAreaViewControl_SetStyle1_i() : mx.states.SetStyle
{
	var temp : mx.states.SetStyle = new mx.states.SetStyle();
	_DrawingAreaViewControl_SetStyle1 = temp;
	temp.name = "textAlign";
	temp.value = "center";
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_SetStyle1", _DrawingAreaViewControl_SetStyle1);
	return temp;
}

private function _DrawingAreaViewControl_SetProperty1_i() : mx.states.SetProperty
{
	var temp : mx.states.SetProperty = new mx.states.SetProperty();
	_DrawingAreaViewControl_SetProperty1 = temp;
	temp.name = "width";
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_SetProperty1", _DrawingAreaViewControl_SetProperty1);
	return temp;
}

private function _DrawingAreaViewControl_State2_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	stateDrawing = temp;
	temp.overrides = [_DrawingAreaViewControl_AddChild2_i()];
	mx.binding.BindingManager.executeBindings(this, "stateDrawing", stateDrawing);
	return temp;
}

private function _DrawingAreaViewControl_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_DrawingAreaViewControl_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_DrawingAreaViewControl_Canvas2_i);
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_AddChild2", _DrawingAreaViewControl_AddChild2);
	return temp;
}

private function _DrawingAreaViewControl_Canvas2_i() : mx.containers.Canvas
{
	var temp : mx.containers.Canvas = new mx.containers.Canvas();
	canvDrawing = temp;
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.verticalScrollPolicy = "off";
	temp.setStyle("borderStyle", "solid");
	temp.setStyle("cornerRadius", 15);
	temp.addEventListener("mouseDown", __canvDrawing_mouseDown);
	temp.addEventListener("mouseUp", __canvDrawing_mouseUp);
	temp.addEventListener("mouseMove", __canvDrawing_mouseMove);
	temp.addEventListener("mouseOut", __canvDrawing_mouseOut);
	temp.addEventListener("mouseOver", __canvDrawing_mouseOver);
	temp.id = "canvDrawing";
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function __canvDrawing_mouseDown(event:flash.events.MouseEvent):void
{
	MouseDown_canvDrawingHandler(event)
}

/**
 * @private
 **/
public function __canvDrawing_mouseUp(event:flash.events.MouseEvent):void
{
	MouseUp_canvDrawingHandler(event)
}

/**
 * @private
 **/
public function __canvDrawing_mouseMove(event:flash.events.MouseEvent):void
{
	MouseMove_canvDrawingHandler(event)
}

/**
 * @private
 **/
public function __canvDrawing_mouseOut(event:flash.events.MouseEvent):void
{
	MouseUp_canvDrawingHandler(event); mouseOut_canvDrawingHandler()
}

/**
 * @private
 **/
public function __canvDrawing_mouseOver(event:flash.events.MouseEvent):void
{
	mouseOver_canvDrawingHandler()
}

private function _DrawingAreaViewControl_State3_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_DrawingAreaViewControl_State3 = temp;
	temp.overrides = [_DrawingAreaViewControl_AddChild3_i(), _DrawingAreaViewControl_SetProperty2_i()];
	temp.addEventListener("enterState", ___DrawingAreaViewControl_State3_enterState);
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_State3", _DrawingAreaViewControl_State3);
	return temp;
}

private function _DrawingAreaViewControl_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_DrawingAreaViewControl_AddChild3 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_DrawingAreaViewControl_Canvas3_i);
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_AddChild3", _DrawingAreaViewControl_AddChild3);
	return temp;
}

private function _DrawingAreaViewControl_Canvas3_i() : mx.containers.Canvas
{
	var temp : mx.containers.Canvas = new mx.containers.Canvas();
	canvNoDrawing = temp;
	temp.percentWidth = 100.0;
	temp.percentHeight = 100.0;
	temp.setStyle("borderStyle", "solid");
	temp.setStyle("cornerRadius", 15);
	temp.id = "canvNoDrawing";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _DrawingAreaViewControl_SetProperty2_i() : mx.states.SetProperty
{
	var temp : mx.states.SetProperty = new mx.states.SetProperty();
	_DrawingAreaViewControl_SetProperty2 = temp;
	temp.name = "visible";
	temp.value = false;
	mx.binding.BindingManager.executeBindings(this, "_DrawingAreaViewControl_SetProperty2", _DrawingAreaViewControl_SetProperty2);
	return temp;
}

/**
 * @private
 **/
public function ___DrawingAreaViewControl_State3_enterState(event:mx.events.FlexEvent):void
{
	enterState_stateContinueHandler(event)
}

/**
 * @private
 **/
public function __btnClear_click(event:flash.events.MouseEvent):void
{
	Click_btnClearHandler(event)
}

/**
 * @private
 **/
public function __btnClear_rollOver(event:flash.events.MouseEvent):void
{
	rollOver_btnClearHandler(event)
}

/**
 * @private
 **/
public function __btnClear_rollOut(event:flash.events.MouseEvent):void
{
	rollOut_btnClearHandler(event)
}


	//	binding mgmt
    private function _DrawingAreaViewControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_drawing);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_relatedPrompt);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _DrawingAreaViewControl_State1.name = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_State1.name");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (txtTitle);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _DrawingAreaViewControl_RemoveChild1.target = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_RemoveChild1.target");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (txtTitle);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _DrawingAreaViewControl_AddChild1.target = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_AddChild1.target");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (canvTitle);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _DrawingAreaViewControl_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_AddChild1.relativeTo");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.styles.IStyleClient
            {
                return (txtTitle);
            },
            function(_sourceFunctionReturnValue:mx.styles.IStyleClient):void
            {
				
                _DrawingAreaViewControl_SetStyle1.target = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_SetStyle1.target");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (txtTitle);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                _DrawingAreaViewControl_SetProperty1.target = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_SetProperty1.target");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():*
            {
                return (canvDrawing.width - 5);
            },
            function(_sourceFunctionReturnValue:*):void
            {
				
                _DrawingAreaViewControl_SetProperty1.value = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_SetProperty1.value");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_drawing);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                stateDrawing.name = _sourceFunctionReturnValue;
            },
            "stateDrawing.name");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (canvDrawingHolder);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _DrawingAreaViewControl_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_AddChild2.relativeTo");
        result[9] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_continue);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _DrawingAreaViewControl_State3.name = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_State3.name");
        result[10] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (canvDrawingHolder);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _DrawingAreaViewControl_AddChild3.relativeTo = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_AddChild3.relativeTo");
        result[11] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (btnClear);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                _DrawingAreaViewControl_SetProperty2.target = _sourceFunctionReturnValue;
            },
            "_DrawingAreaViewControl_SetProperty2.target");
        result[12] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 100);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                canvContainer.maxWidth = _sourceFunctionReturnValue;
            },
            "canvContainer.maxWidth");
        result[13] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 100);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                canvContainer.minWidth = _sourceFunctionReturnValue;
            },
            "canvContainer.minWidth");
        result[14] = binding;

        return result;
    }

    private function _DrawingAreaViewControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_drawing);
		[Binding(id='1')]
		destination = (state_relatedPrompt);
		[Binding(id='2')]
		destination = (txtTitle);
		[Binding(id='3')]
		destination = (txtTitle);
		[Binding(id='4')]
		destination = (canvTitle);
		[Binding(id='5')]
		destination = (txtTitle);
		[Binding(id='6')]
		destination = (txtTitle);
		[Binding(id='7')]
		destination = (canvDrawing.width - 5);
		[Binding(id='8')]
		destination = (state_drawing);
		[Binding(id='9')]
		destination = (canvDrawingHolder);
		[Binding(id='10')]
		destination = (state_continue);
		[Binding(id='11')]
		destination = (canvDrawingHolder);
		[Binding(id='12')]
		destination = (btnClear);
		[Binding(id='13')]
		destination = (ActivityControl.MAX_WIDTH - 100);
		[Binding(id='14')]
		destination = (ActivityControl.MAX_WIDTH - 100);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (DrawingAreaViewControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
