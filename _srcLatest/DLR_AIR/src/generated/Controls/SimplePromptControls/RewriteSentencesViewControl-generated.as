
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls
 *	Class: 		RewriteSentencesViewControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\RewriteSentencesViewControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:03 EEST
 */

package Controls.SimplePromptControls
{

import Controls.Enviroment.AutoResizableTextArea;
import Controls.Enviroment.TextExended;
import Interfaces.IDirectionPrompt;
import Interfaces.IFontStyle;
import Interfaces.IResult;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.display.DisplayObject;
import flash.errors.*;
import flash.events.*;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Box;
import mx.containers.Canvas;
import mx.containers.HBox;
import mx.containers.VBox;
import mx.controls.Image;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.effects.Blur;
import mx.effects.Parallel;
import mx.effects.Resize;
import mx.effects.Sequence;
import mx.events.FlexEvent;
import mx.states.AddChild;
import mx.states.RemoveChild;
import mx.states.State;
import mx.states.Transition;
import mx.styles.*;



//	begin class def

public class RewriteSentencesViewControl
	extends mx.containers.Canvas
	implements Interfaces.IDirectionPrompt, Interfaces.IFontStyle, Interfaces.IResult, mx.binding.IBindingClient
{

	//	instance variables
/**
 * @private
 **/
	public var _RewriteSentencesViewControl_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_Parallel1 : mx.effects.Parallel;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_RemoveChild1 : mx.states.RemoveChild;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_State1 : mx.states.State;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_State2 : mx.states.State;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_State3 : mx.states.State;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_State4 : mx.states.State;

/**
 * @private
 **/
	public var _RewriteSentencesViewControl_Transition1 : mx.states.Transition;

	[Bindable]
/**
 * @private
 **/
	public var boxContent : mx.containers.Box;

	[Bindable]
/**
 * @private
 **/
	public var hBoxCorrect : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var hBoxIncorrect : mx.containers.HBox;

	[Bindable]
/**
 * @private
 **/
	public var imgCorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var imgIncorrect : mx.controls.Image;

	[Bindable]
/**
 * @private
 **/
	public var showResizeEffect : mx.effects.Resize;

	[Bindable]
/**
 * @private
 **/
	public var textAnswerCorrect : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var textAnswerIncorrect : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var textInput : Controls.Enviroment.AutoResizableTextArea;

	[Bindable]
/**
 * @private
 **/
	public var textSentences : Controls.Enviroment.TextExended;

	[Bindable]
/**
 * @private
 **/
	public var vBox : mx.containers.VBox;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VBox
        ,
        id: "vBox"
        ,
        propertiesFactory: function():Object { return {
          percentWidth: 100.0,
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: Controls.Enviroment.TextExended
              ,
              id: "textSentences"
              ,
              propertiesFactory: function():Object { return {
                selectable: false
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Box
              ,
              id: "boxContent"
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                percentWidth: 100.0
              }}
            })
          ]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function RewriteSentencesViewControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.maxWidth = 800;
		this.verticalScrollPolicy = "off";
		this.horizontalScrollPolicy = "off";
		this.transitions = [_RewriteSentencesViewControl_Transition1_i()];
		this.states = [_RewriteSentencesViewControl_State1_i(), _RewriteSentencesViewControl_State2_i(), _RewriteSentencesViewControl_State3_i(), _RewriteSentencesViewControl_State4_i()];

		//	events
		this.addEventListener("updateComplete", ___RewriteSentencesViewControl_Canvas1_updateComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _RewriteSentencesViewControl_bindingsSetup();
		var watchers:Array = [];

		var target:RewriteSentencesViewControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_RewriteSentencesViewControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 5 - 255

      import Controls.QuizControl;
      import Model.Preferences;
      import mx.controls.TextInput;
      import mx.controls.TextArea;
      import mx.core.IUITextField;
      import mx.core.UIComponent;
      import mx.controls.Alert;
      import mx.accessibility.AlertAccImpl;
      import Model.EditDistanceExt;
      import Model.EnumRegExp;
      import Model.FactoryRegExp;
      import Model.Syntax.RelationSentence;
      import Model.Prompts.RewriteSentence;
      import Model.EmbededData;
      import Controls.ActivityControl;
      import mx.events.FlexEvent;
      import Model.Prompts.Prompt;
      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\RewriteSentencesViewControl.mxml
      *
      *  Abstract:
      *     This is visual control for rewrite sentences prompt
      *
      *  Author:
      *     Evgenij Welikij   29-October-2009
      *
      *  Revision History:
      *
      ***************************************************************/
      //  var point:Point = localToGlobal(new Point());
      //  point = QuizControl.instance.globalToLocal(point);

      /**
      * Static
      */


      /**
      * Private members/properties
      */
      private var _answer:RewriteSentence;
      private var _isContinue:Boolean = false;        // флаг указывающий на то пройдено это упражнение или нет

      private const state_edit:String = "state_edit";
      private const state_correct:String = "state_correct";
      private const state_incorrect:String = "state_incorrect";
      private const state_correctAndIncorrect:String = "state_correctAndIncorrect";
      private const state_editHeight:String = "state_editHeight";
     
      /**
      * Private methods
      */


      /**
      * Events handler
      */
      private function UpdateComplete(event:FlexEvent):void
      {
        // устанавливаем длинну текст бокса
        var point:Point = new Point(textInput.x, textInput.y);
        point = localToGlobal(point);
        
        point = QuizControl.instance.globalToLocal(point);
        // учитаваем его положение по "x"
        textInput.width = ActivityControl.MAX_WIDTH - point.x - 15;
      }

      private function UpdateComplete_textInput(event:TextEvent):void
      {
        /*var textMetrics:TextLineMetrics = textInput.measureText(textInput.text);
        var textWidth:int = textMetrics.width + textMetrics.x * 20;

        if (textWidth > textInput.width && currentState == state_edit)
        {
          currentState = state_editHeight;
          txtAutoResize.setFocus();
        }
        else if (textWidth < textInput.width && currentState == state_editHeight)
        {
          currentState = state_edit;
          textInput.setFocus();
        }*/
      }

      private function FocusInHandler(event:FocusEvent):void
      {
        var control:UIComponent = event.currentTarget as UIComponent;

        if (control is TextArea)
        {
          (control as TextArea).selectionBeginIndex = (control as TextArea).text.length + 1;
          (control as TextArea).selectionEndIndex = (control as TextArea).text.length + 1;
        }
        else if (control is TextInput)
        {
          (control as TextInput).selectionBeginIndex = (control as TextInput).text.length + 1;
          (control as TextInput).selectionEndIndex = (control as TextInput).text.length + 1;
        }

      }


      /**
      * Initialization
      */


      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */
      public virtual function FontName(name:String):void
      {
        textSentences.setStyle("fontFamily", name);
        textInput.setStyle("fontFamily", name);
        textAnswerIncorrect.setStyle("fontFamily", name);
        textAnswerCorrect.setStyle("fontFamily", name);
        
     //  textArea.height = textSentences.measureText("A").height + textSentences.measureText("A").leading;
      }

      public virtual function FontSize(size:int):void
      {
        textSentences.setStyle("fontSize", size + 1);
        textInput.setStyle("fontSize", size);
        textAnswerCorrect.setStyle("fontSize", size);
        textAnswerIncorrect.setStyle("fontSize", size);

      //  textArea.height = textSentences.measureText("A").height + textSentences.measureText("A").leading;

        imgCorrect.width = size;
        imgCorrect.height = size;
        imgIncorrect.width = size;
        imgIncorrect.height = size;
      }

      public virtual function FontColor(color:int):void
      {
        textSentences.setStyle("color", color);
        textInput.setStyle("color", color);
        textAnswerCorrect.setStyle("color", color);
        textAnswerIncorrect.setStyle("color", color);
      }

      public virtual function Bold():void
      {
      }

      public virtual function IsComplete():Boolean
      {
        return (textSentences.text == "") ? false : true;
      }

      public virtual function Init(prompt:Prompt):void
      {
        // Вырезаем все теги типа {0}
       textSentences.htmlText = prompt.text.replace(new RegExp('\\{\\s*?[0-9]{1,2}\\s*?\\}','g'),'');
       // оставляем только по 1 пробелу
       textSentences.htmlText = textSentences.htmlText.replace(FactoryRegExp.instance.DeleteSpaces(EnumRegExp.G),' ');
       // удаляем пробелы в начале строки
       textSentences.htmlText = textSentences.htmlText.replace(FactoryRegExp.instance.SpacesStartString(EnumRegExp.Empty),'');
       // удаляем пробелы в конце строки
       textSentences.htmlText = textSentences.htmlText.replace(FactoryRegExp.instance.SpacesFinishString(EnumRegExp.Empty),'');
       _answer = RewriteSentence(prompt);
      }

      public virtual function GetText():String
      {
        // Нормализируем апострофы которые мог ввести пользователь на обычный из xml
        textInput.text =  textInput.text.replace(new RegExp('[’`]','g'),'\'');
        // заменяем кавычки на нормальные чтобы сравнить строки
        textInput.text = textInput.text.replace(new RegExp("[“”]", "g"), "\"");
        return textInput.text;
      }

      public virtual function Continue():void
      {
        currentState = state_correct;
        _isContinue = true;
      }

      public virtual function SetIncorrect():void
      {
        if (!_isContinue)
        {
          currentState = state_incorrect;
        }
      }

      public virtual function SetCorrect():void
      {
        if (!_isContinue)
        {
                // сдесь устанавливаем правильный ответ
                textInput.text = _answer.answer;
      
                //Удаляем все марки
                var answerWrong:String = _answer.text.replace(FactoryRegExp.instance.Mark(EnumRegExp.G),'');
                var answerRich:String = _answer.answer.replace(FactoryRegExp.instance.Mark(EnumRegExp.G),'');
                //Удаляем все теги <br>
                answerWrong = answerWrong.replace(FactoryRegExp.instance.BR(EnumRegExp.G),' ');
                answerRich = answerRich.replace(FactoryRegExp.instance.BR(EnumRegExp.G),' ');
                answerRich = answerRich.replace(new RegExp("[“”]", "g"), "\"");
      
                var editDistance:EditDistanceExt = new EditDistanceExt(answerRich, answerWrong, EmbededData.inctance.iconCorrectColorHex);
                
                textAnswerCorrect.htmlText = editDistance.compareString;
                textAnswerCorrect.htmlText = textAnswerCorrect.htmlText.replace(new RegExp('\n','g'),'');
               
               
                if (currentState == state_incorrect || isCheckAnswer == false)
                {
                  currentState = state_correctAndIncorrect;
                }
                else
                {
                  currentState = state_correct;
                }
        }
      }

      public virtual function DefaultFont():void
      {
        textSentences.setStyle("fontFamily", "Futura");
        textInput.setStyle("fontFamily", "EMComic");
        textAnswerIncorrect.setStyle("fontFamily", "EMComic");
        textAnswerCorrect.setStyle("fontFamily", "EMComic");
      }


      /**
      * Public members/properties
      */
      //Отключена ли оцпия CheckAnswer в настройках
       public var isCheckAnswer:Boolean = true;

      /**
      * Public methods
      */



    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _RewriteSentencesViewControl_Transition1_i() : mx.states.Transition
{
	var temp : mx.states.Transition = new mx.states.Transition();
	_RewriteSentencesViewControl_Transition1 = temp;
	temp.effect = _RewriteSentencesViewControl_Parallel1_i();
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_Transition1", _RewriteSentencesViewControl_Transition1);
	return temp;
}

private function _RewriteSentencesViewControl_Parallel1_i() : mx.effects.Parallel
{
	var temp : mx.effects.Parallel = new mx.effects.Parallel();
	_RewriteSentencesViewControl_Parallel1 = temp;
	temp.children = [_RewriteSentencesViewControl_Resize1_i(), _RewriteSentencesViewControl_Sequence1_c()];
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_Parallel1", _RewriteSentencesViewControl_Parallel1);
	return temp;
}

private function _RewriteSentencesViewControl_Resize1_i() : mx.effects.Resize
{
	var temp : mx.effects.Resize = new mx.effects.Resize();
	showResizeEffect = temp;
	temp.duration = 300;
	temp.heightFrom = 0;
	return temp;
}

private function _RewriteSentencesViewControl_Sequence1_c() : mx.effects.Sequence
{
	var temp : mx.effects.Sequence = new mx.effects.Sequence();
	temp.children = [_RewriteSentencesViewControl_Blur1_c(), _RewriteSentencesViewControl_Blur2_c()];
	return temp;
}

private function _RewriteSentencesViewControl_Blur1_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 1.0;
	temp.blurYTo = 20.0;
	return temp;
}

private function _RewriteSentencesViewControl_Blur2_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 20.0;
	temp.blurYTo = 1;
	return temp;
}

private function _RewriteSentencesViewControl_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_RewriteSentencesViewControl_State1 = temp;
	temp.overrides = [_RewriteSentencesViewControl_AddChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_State1", _RewriteSentencesViewControl_State1);
	return temp;
}

private function _RewriteSentencesViewControl_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_RewriteSentencesViewControl_AddChild1 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_RewriteSentencesViewControl_AutoResizableTextArea1_i);
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_AddChild1", _RewriteSentencesViewControl_AddChild1);
	return temp;
}

private function _RewriteSentencesViewControl_AutoResizableTextArea1_i() : Controls.Enviroment.AutoResizableTextArea
{
	var temp : Controls.Enviroment.AutoResizableTextArea = new Controls.Enviroment.AutoResizableTextArea();
	textInput = temp;
	temp.styleName = "listVerticalScrollBar";
	temp.autoResizeble = true;
	temp.id = "textInput";
	if (!temp.document) temp.document = this;
	return temp;
}

private function _RewriteSentencesViewControl_State2_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_RewriteSentencesViewControl_State2 = temp;
	temp.overrides = [_RewriteSentencesViewControl_AddChild2_i()];
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_State2", _RewriteSentencesViewControl_State2);
	return temp;
}

private function _RewriteSentencesViewControl_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_RewriteSentencesViewControl_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_RewriteSentencesViewControl_HBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_AddChild2", _RewriteSentencesViewControl_AddChild2);
	return temp;
}

private function _RewriteSentencesViewControl_HBox1_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	hBoxIncorrect = temp;
	temp.horizontalScrollPolicy = "off";
	temp.verticalScrollPolicy = "off";
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxIncorrect";
	mx.binding.BindingManager.executeBindings(this, "hBoxIncorrect", hBoxIncorrect);
	if (!temp.document) temp.document = this;
	temp.addChild(_RewriteSentencesViewControl_Image1_i());
	temp.addChild(_RewriteSentencesViewControl_TextExended1_i());
	return temp;
}

private function _RewriteSentencesViewControl_Image1_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgIncorrect = temp;
	temp.id = "imgIncorrect";
	mx.binding.BindingManager.executeBindings(this, "imgIncorrect", imgIncorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _RewriteSentencesViewControl_TextExended1_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	textAnswerIncorrect = temp;
	temp.selectable = false;
	temp.id = "textAnswerIncorrect";
	mx.binding.BindingManager.executeBindings(this, "textAnswerIncorrect", textAnswerIncorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _RewriteSentencesViewControl_State3_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_RewriteSentencesViewControl_State3 = temp;
	temp.overrides = [_RewriteSentencesViewControl_AddChild3_i()];
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_State3", _RewriteSentencesViewControl_State3);
	return temp;
}

private function _RewriteSentencesViewControl_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_RewriteSentencesViewControl_AddChild3 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_RewriteSentencesViewControl_HBox2_i);
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_AddChild3", _RewriteSentencesViewControl_AddChild3);
	return temp;
}

private function _RewriteSentencesViewControl_HBox2_i() : mx.containers.HBox
{
	var temp : mx.containers.HBox = new mx.containers.HBox();
	hBoxCorrect = temp;
	temp.horizontalScrollPolicy = "off";
	temp.verticalScrollPolicy = "off";
	temp.setStyle("verticalAlign", "middle");
	temp.id = "hBoxCorrect";
	mx.binding.BindingManager.executeBindings(this, "hBoxCorrect", hBoxCorrect);
	if (!temp.document) temp.document = this;
	temp.addChild(_RewriteSentencesViewControl_Image2_i());
	temp.addChild(_RewriteSentencesViewControl_TextExended2_i());
	return temp;
}

private function _RewriteSentencesViewControl_Image2_i() : mx.controls.Image
{
	var temp : mx.controls.Image = new mx.controls.Image();
	imgCorrect = temp;
	temp.id = "imgCorrect";
	mx.binding.BindingManager.executeBindings(this, "imgCorrect", imgCorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _RewriteSentencesViewControl_TextExended2_i() : Controls.Enviroment.TextExended
{
	var temp : Controls.Enviroment.TextExended = new Controls.Enviroment.TextExended();
	textAnswerCorrect = temp;
	temp.selectable = false;
	temp.id = "textAnswerCorrect";
	mx.binding.BindingManager.executeBindings(this, "textAnswerCorrect", textAnswerCorrect);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _RewriteSentencesViewControl_State4_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_RewriteSentencesViewControl_State4 = temp;
	temp.overrides = [_RewriteSentencesViewControl_RemoveChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_State4", _RewriteSentencesViewControl_State4);
	return temp;
}

private function _RewriteSentencesViewControl_RemoveChild1_i() : mx.states.RemoveChild
{
	var temp : mx.states.RemoveChild = new mx.states.RemoveChild();
	_RewriteSentencesViewControl_RemoveChild1 = temp;
	mx.binding.BindingManager.executeBindings(this, "_RewriteSentencesViewControl_RemoveChild1", _RewriteSentencesViewControl_RemoveChild1);
	return temp;
}

/**
 * @private
 **/
public function ___RewriteSentencesViewControl_Canvas1_updateComplete(event:mx.events.FlexEvent):void
{
	UpdateComplete(event)
}


	//	binding mgmt
    private function _RewriteSentencesViewControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_Transition1.fromState = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_Transition1.fromState");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correctAndIncorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_Transition1.toState = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_Transition1.toState");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (hBoxCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                _RewriteSentencesViewControl_Parallel1.target = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_Parallel1.target");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_State1.name = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_State1.name");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (boxContent);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _RewriteSentencesViewControl_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_AddChild1.relativeTo");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_State2.name = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_State2.name");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (boxContent);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _RewriteSentencesViewControl_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_AddChild2.relativeTo");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (textInput.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxIncorrect.width = _sourceFunctionReturnValue;
            },
            "hBoxIncorrect.width");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconIncorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgIncorrect.source = _sourceFunctionReturnValue;
            },
            "imgIncorrect.source");
        result[9] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (textInput.htmlText);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                textAnswerIncorrect.htmlText = _sourceFunctionReturnValue;
            },
            "textAnswerIncorrect.htmlText");
        result[10] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (hBoxIncorrect.width - imgIncorrect.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                textAnswerIncorrect.width = _sourceFunctionReturnValue;
            },
            "textAnswerIncorrect.width");
        result[11] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correctAndIncorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_State3.name = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_State3.name");
        result[12] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_incorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_State3.basedOn = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_State3.basedOn");
        result[13] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (boxContent);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _RewriteSentencesViewControl_AddChild3.relativeTo = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_AddChild3.relativeTo");
        result[14] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (textInput.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                hBoxCorrect.width = _sourceFunctionReturnValue;
            },
            "hBoxCorrect.width");
        result[15] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (EmbededData.inctance.iconCorrect);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                imgCorrect.source = _sourceFunctionReturnValue;
            },
            "imgCorrect.source");
        result[16] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (hBoxCorrect.width - imgCorrect.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                textAnswerCorrect.width = _sourceFunctionReturnValue;
            },
            "textAnswerCorrect.width");
        result[17] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correct);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_State4.name = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_State4.name");
        result[18] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_correctAndIncorrect);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _RewriteSentencesViewControl_State4.basedOn = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_State4.basedOn");
        result[19] = binding;
        binding = new mx.binding.Binding(this,
            function():flash.display.DisplayObject
            {
                return (hBoxIncorrect);
            },
            function(_sourceFunctionReturnValue:flash.display.DisplayObject):void
            {
				
                _RewriteSentencesViewControl_RemoveChild1.target = _sourceFunctionReturnValue;
            },
            "_RewriteSentencesViewControl_RemoveChild1.target");
        result[20] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - imgCorrect.width - 60);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                textSentences.width = _sourceFunctionReturnValue;
            },
            "textSentences.width");
        result[21] = binding;

        return result;
    }

    private function _RewriteSentencesViewControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_edit);
		[Binding(id='1')]
		destination = (state_incorrect);
		[Binding(id='2')]
		destination = (state_correctAndIncorrect);
		[Binding(id='3')]
		destination = (hBoxCorrect);
		[Binding(id='4')]
		destination = (state_edit);
		[Binding(id='5')]
		destination = (boxContent);
		[Binding(id='6')]
		destination = (state_incorrect);
		[Binding(id='7')]
		destination = (boxContent);
		[Binding(id='8')]
		destination = (textInput.width);
		[Binding(id='9')]
		destination = (EmbededData.inctance.iconIncorrect);
		[Binding(id='10')]
		destination = (textInput.htmlText);
		[Binding(id='11')]
		destination = (hBoxIncorrect.width - imgIncorrect.width);
		[Binding(id='12')]
		destination = (state_correctAndIncorrect);
		[Binding(id='13')]
		destination = (state_incorrect);
		[Binding(id='14')]
		destination = (boxContent);
		[Binding(id='15')]
		destination = (textInput.width);
		[Binding(id='16')]
		destination = (EmbededData.inctance.iconCorrect);
		[Binding(id='17')]
		destination = (hBoxCorrect.width - imgCorrect.width);
		[Binding(id='18')]
		destination = (state_correct);
		[Binding(id='19')]
		destination = (state_correctAndIncorrect);
		[Binding(id='20')]
		destination = (hBoxIncorrect);
		[Binding(id='21')]
		destination = (ActivityControl.MAX_WIDTH - imgCorrect.width - 60);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (RewriteSentencesViewControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
