
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls.SimplePromptControls.Open_endedWritingPrompt
 *	Class: 		Open_endedWritingPromptAdvanced
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\SimplePromptControls\Open_endedWritingPrompt\Open_endedWritingPromptAdvanced.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:03 EEST
 */

package Controls.SimplePromptControls.Open_endedWritingPrompt
{

import Controls.FlowBox.FlowBox;
import Interfaces.IDirectionPrompt;
import Interfaces.IFontStyle;
import Interfaces.IResult;
import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Canvas;
import mx.controls.Button;
import mx.controls.Text;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.events.FlexEvent;
import mx.states.AddChild;
import mx.states.State;
import mx.styles.*;



//	begin class def

public class Open_endedWritingPromptAdvanced
	extends mx.containers.Canvas
	implements Interfaces.IDirectionPrompt, Interfaces.IFontStyle, Interfaces.IResult, mx.binding.IBindingClient
{

	//	instance variables
/**
 * @private
 **/
	public var _Open_endedWritingPromptAdvanced_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _Open_endedWritingPromptAdvanced_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _Open_endedWritingPromptAdvanced_AddChild3 : mx.states.AddChild;

/**
 * @private
 **/
	public var _Open_endedWritingPromptAdvanced_State1 : mx.states.State;

/**
 * @private
 **/
	public var _Open_endedWritingPromptAdvanced_State2 : mx.states.State;

/**
 * @private
 **/
	public var _Open_endedWritingPromptAdvanced_State3 : mx.states.State;

	[Bindable]
/**
 * @private
 **/
	public var btnShow : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var flowBox : Controls.FlowBox.FlowBox;

	[Bindable]
/**
 * @private
 **/
	public var txtFull : mx.controls.Text;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function Open_endedWritingPromptAdvanced()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.verticalScrollPolicy = "off";
		this.horizontalScrollPolicy = "off";
		this.states = [_Open_endedWritingPromptAdvanced_State1_i(), _Open_endedWritingPromptAdvanced_State2_i(), _Open_endedWritingPromptAdvanced_State3_i()];

		//	events
		this.addEventListener("creationComplete", ___Open_endedWritingPromptAdvanced_Canvas1_creationComplete);

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _Open_endedWritingPromptAdvanced_bindingsSetup();
		var watchers:Array = [];

		var target:Open_endedWritingPromptAdvanced = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_SimplePromptControls_Open_endedWritingPrompt_Open_endedWritingPromptAdvancedWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 7 - 319

      import mx.events.ResizeEvent;
      import Model.EnumRegExp;
      import Controls.Enviroment.TextExended;
      import Controls.SelectableLabel;
      import Model.EmbededData;
      import mx.core.UIComponent;
      import mx.controls.Label;
      import mx.controls.TextInput;
      import __AS3__.vec.Vector;
      import Model.FactoryRegExp;
      import Model.Answers.VariantORAnswer;
      import Model.Events.AnswerWillVaryViewControlEvent;
      import Controls.QuizControl;
      import Controls.SimplePromptControls.AnswerWillVaryViewControl;
      import mx.managers.PopUpManager;
      import Controls.Windows.AlertWindow;
      import Model.Prompts.Open_endedWritingPrompt;
      import Controls.ActivityControl;
      import mx.events.FlexEvent;
      import Model.Answers.Answer;
      import Model.Prompts.Prompt;
      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\Open_endedWritingPrompt\Open_endedWritingPromptControlAdvanced.mxml
      *
      *  Abstract:
      *     This is advanced open-ended writing prompt control
      *
      *  Author:
      *     Evgenij Welikij   22-October-2009
      *
      *  Revision History:
      *
      ***************************************************************/


      /**
      * Static
      */


      /**
      * Private members/properties
      */
      private const state_edit:String = "state_edit";
      private const state_text:String = "state_text";
      private const state_answers_will_vary:String = "state_answers_will_vary";

      private var _answersWariant:Array = new Array();
      private var _fontName:String;

      [Bindable]
      private var _fontSize:int;
      private var _fontColor:int;
      private var isContinueOneState:Boolean = false;

      private var answerWillWaryControl:AnswerWillVaryViewControl;
      private var _txtInputs:Vector.<TextInput> = new Vector.<TextInput>();
      private var stringForAnswerWillVaryViewControl:String;
      private var _prompt:Open_endedWritingPromptAdvanced;



      /**
      * Private methods
      */
      private function buildStringForAnswerWillVaryViewControl():void
      {
        stringForAnswerWillVaryViewControl = "";

        //Пробегаем по всем возможным ответам и сверяем их с текстом который ввел пользователь
        for each (var item:Object in this._answersWariant)
        {
          if (item is VariantORAnswer)
          {
            //Сравниваем строки в нижнем регистре и с удалеными пробелами
            if(FactoryRegExp.NormalazeString((item as VariantORAnswer).text.toLowerCase()) != FactoryRegExp.NormalazeString(this._txtInputs[0].text.toString().toLowerCase()))
              stringForAnswerWillVaryViewControl += (item as VariantORAnswer).text +', ';
          }
        }
      }
      
     
      /**
      * Events handler
      */
      private function Clik_btnShowHandler(event:MouseEvent):void
      {
       this.btnShow.visible = false;

        stringForAnswerWillVaryViewControl  = stringForAnswerWillVaryViewControl.replace(new RegExp(',\\s*?$','g'),'');
        answerWillWaryControl = AnswerWillVaryViewControl.Show(this, stringForAnswerWillVaryViewControl, this.localToGlobal(new Point()),this._fontName,this._fontSize,this._fontColor);
        QuizControl.instance.hideCanvas.visible = true;
        answerWillWaryControl.addEventListener(AnswerWillVaryViewControlEvent.ANSWER_WILL_VARY_EVENT, WillVaryEventHandler);
      }

      private function WillVaryEventHandler(event:AnswerWillVaryViewControlEvent):void
      {
         QuizControl.instance.hideCanvas.visible = false;
         this.btnShow.visible = true;
         answerWillWaryControl.removeEventListener(AnswerWillVaryViewControlEvent.ANSWER_WILL_VARY_EVENT, WillVaryEventHandler);
      }

      private function UpdateComplete_controlHandler(event:FlexEvent):void
      {
        // делаем label ровно по длинне текста
        var label:Text = event.currentTarget as Text;
        var lineMetrics:TextLineMetrics = label.measureText(label.text);
        if (label.text != " " && label.text != "")
        {
           // label.width = lineMetrics.width;
            label.width = lineMetrics.width + lineMetrics.x * 3;
        }
        else
            label.width = lineMetrics.width;
      }

      private function UpdateComplete_txtInputHandler(event:FlexEvent):void
      {
        var txtInput:TextInput = event.currentTarget as TextInput;
        txtInput.width = txtInput.measureText("123456789012345").width;  // width = 15 symbols
      }

       // метод отслеживает когдла возникает скрол у activityControl и уменьшает контрол на размер скрола
      private function resize_activityControlHandler(event:ResizeEvent):void
      {
         var point:Point = this.localToGlobal(new Point());
         point = QuizControl.instance.globalToLocal(point);
          if (QuizControl.instance.activityControl.isCreatedVerticalScroll == true)
              this.width = ActivityControl.MAX_WIDTH - point.x - 12;
          else if (QuizControl.instance.activityControl.isCreatedVerticalScroll == false)
                   this.width = ActivityControl.MAX_WIDTH - point.x;
      }

      private function enterState_stateAnswersWillVaryHandler(event:FlexEvent):void
      {
        if (stringForAnswerWillVaryViewControl == "")
          currentState = state_text;
      }

       //Расчитываем длину контрола когда он будет создан чтоб были доступны глобальные координаты
      private function creationCompleteHandler(event:FlexEvent):void
      {
         if (QuizControl.instance != null)
             QuizControl.instance.activityControl.ScrollConteiner.addEventListener(ResizeEvent.RESIZE, resize_activityControlHandler);
      }

      /**
      * Initialization
      */


      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */
      public virtual function FontName(name:String):void
      {
        flowBox.setStyle("fontFamily", name);
        txtFull.setStyle("fontFamily", name);

        this._fontName = name; 
      }

      public virtual function FontSize(size:int):void
      {
        flowBox.setStyle("fontSize", size);
        txtFull.setStyle("fontSize", size);

        this._fontSize = size;
       
      }

      public virtual function FontColor(color:int):void
      {
        flowBox.setStyle("color", color);
        txtFull.setStyle("color", color);

        this._fontColor = color;
      }

      public virtual function Bold():void
      {
      }

      public virtual function IsComplete():Boolean
      {
        if (ActivityControl.isCheckAnswer == false)
          return true;

        for each (var item:TextInput in _txtInputs)
          if (item.text == "")
            return false;
        return true;
      }

      public virtual function Init(prompt:Prompt):void
      {
        this._prompt = (prompt as Open_endedWritingPromptAdvanced);
        
        var separatorPattern:RegExp = new RegExp(Prompt.separatorPatternString, "g");
        
        var textTemp:String = FactoryRegExp.AddTagToEachWord(FactoryRegExp.instance.U_start(EnumRegExp.G), FactoryRegExp.instance.U_finish(EnumRegExp.G),
                                                                FactoryRegExp.U_START, FactoryRegExp.U_FINISH, prompt.text);
        textTemp = FactoryRegExp.AddTagToEachWord(FactoryRegExp.instance.B_start(EnumRegExp.G), FactoryRegExp.instance.B_finish(EnumRegExp.G),
                                                                FactoryRegExp.B_START, FactoryRegExp.B_FINISH, textTemp);

          //добовляем по два пробела между словами     
          textTemp = textTemp.replace(new RegExp("\\s",'g'),"  ");
          //добовляем пробел между сепаратором и словом спереди    
          textTemp = textTemp.replace(new RegExp("(\\S)("+Prompt.separatorPatternString+")",'g'),"$1 $2");
          //добовляем пробел между сепаратором и словом с сзадиреди  
          textTemp = textTemp.replace(new RegExp("("+Prompt.separatorPatternString+")(\\S)",'g'),"$1 $2"); 
        
          var words:Array = textTemp.split(" ");
          var text:TextExended = null;

          for each (var word:String in words)
          {
            text = new TextExended();
            //Подписываем на событие что бы менять размер элементов
            text.addEventListener(FlexEvent.UPDATE_COMPLETE, UpdateComplete_controlHandler);
            text.selectable = false;

            if (word == "" || word == " ")
            {
               text.HtmlText += "";
               flowBox.addChild(text);
            }
            else if (word == Prompt.separator)
            {
               var txtInput:TextInput = new TextInput();
               //Подписываем на событие что бы менять размер элементов
               txtInput.addEventListener(FlexEvent.UPDATE_COMPLETE, UpdateComplete_txtInputHandler);
               _txtInputs.push(txtInput);
               flowBox.addChild(txtInput);
            }
            else
            {
               text.HtmlText = word == "" ? " " : word;
               flowBox.addChild(text);
            }
          }
        if ((prompt as Open_endedWritingPrompt).variantOrAnswerContainer != null)
          this._answersWariant = (prompt as Open_endedWritingPrompt).variantOrAnswerContainer.ChildAnswers();
      }

      public virtual function GetText():String
      {
        return txtFull.text;
      }

      public virtual function Continue():void
      {
        buildStringForAnswerWillVaryViewControl();

        txtFull.htmlText = "";

        for each (var item:UIComponent in flowBox.getChildren())
        {
          if (item is TextExended)
              txtFull.htmlText += (item as TextExended).HtmlText;

          else if (item is TextInput)
              //выделяем введенный пользователем текст зеленным цветом
                txtFull.htmlText +=  '<font color="#' + SelectableLabel.IntToHex(EmbededData.inctance.iconCorrectColor.toString()) + '">'+ (item as TextInput).text + "</font>";

        }
        //оОбъеденяем теги u что бы сохранить пробелы между словами
        txtFull.htmlText = txtFull.htmlText.replace(new RegExp('(<\\s*?/u\\s*?>)(\\s+?)(<\\s*?u\\s*?>)','g'),'$2');
        txtFull.htmlText =  FactoryRegExp.NormalazeString(txtFull.htmlText);

        if (this._answersWariant.length != 0 && isContinueOneState == false)
        {
          currentState = state_answers_will_vary;
          isContinueOneState = true;
        }
        else
          currentState = state_text;
      }

      public virtual function SetCorrect():void
      {
      }

      public virtual function SetIncorrect():void
      {
      }

      public virtual function DefaultFont():void
      {
        flowBox.setStyle("fontFamily", "Futura");
        txtFull.setStyle("fontFamily", "Futura");
      }


      /**
      * Public members/properties
      */


      /**
      * Public methods
      */


    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _Open_endedWritingPromptAdvanced_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_Open_endedWritingPromptAdvanced_State1 = temp;
	temp.overrides = [_Open_endedWritingPromptAdvanced_AddChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_Open_endedWritingPromptAdvanced_State1", _Open_endedWritingPromptAdvanced_State1);
	return temp;
}

private function _Open_endedWritingPromptAdvanced_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_Open_endedWritingPromptAdvanced_AddChild1 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_Open_endedWritingPromptAdvanced_FlowBox1_i);
	mx.binding.BindingManager.executeBindings(this, "_Open_endedWritingPromptAdvanced_AddChild1", _Open_endedWritingPromptAdvanced_AddChild1);
	return temp;
}

private function _Open_endedWritingPromptAdvanced_FlowBox1_i() : Controls.FlowBox.FlowBox
{
	var temp : Controls.FlowBox.FlowBox = new Controls.FlowBox.FlowBox();
	flowBox = temp;
	temp.verticalScrollPolicy = "off";
	temp.horizontalScrollPolicy = "off";
	temp.setStyle("horizontalGap", 0);
	temp.setStyle("verticalAlign", "middle");
	temp.setStyle("paddingLeft", 1);
	temp.setStyle("paddingTop", 1);
	temp.id = "flowBox";
	mx.binding.BindingManager.executeBindings(this, "flowBox", flowBox);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _Open_endedWritingPromptAdvanced_State2_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_Open_endedWritingPromptAdvanced_State2 = temp;
	temp.overrides = [_Open_endedWritingPromptAdvanced_AddChild2_i()];
	mx.binding.BindingManager.executeBindings(this, "_Open_endedWritingPromptAdvanced_State2", _Open_endedWritingPromptAdvanced_State2);
	return temp;
}

private function _Open_endedWritingPromptAdvanced_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_Open_endedWritingPromptAdvanced_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_Open_endedWritingPromptAdvanced_Text1_i);
	mx.binding.BindingManager.executeBindings(this, "_Open_endedWritingPromptAdvanced_AddChild2", _Open_endedWritingPromptAdvanced_AddChild2);
	return temp;
}

private function _Open_endedWritingPromptAdvanced_Text1_i() : mx.controls.Text
{
	var temp : mx.controls.Text = new mx.controls.Text();
	txtFull = temp;
	temp.selectable = false;
	temp.id = "txtFull";
	mx.binding.BindingManager.executeBindings(this, "txtFull", txtFull);
	if (!temp.document) temp.document = this;
	return temp;
}

private function _Open_endedWritingPromptAdvanced_State3_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_Open_endedWritingPromptAdvanced_State3 = temp;
	temp.overrides = [_Open_endedWritingPromptAdvanced_AddChild3_i()];
	temp.addEventListener("enterState", ___Open_endedWritingPromptAdvanced_State3_enterState);
	mx.binding.BindingManager.executeBindings(this, "_Open_endedWritingPromptAdvanced_State3", _Open_endedWritingPromptAdvanced_State3);
	return temp;
}

private function _Open_endedWritingPromptAdvanced_AddChild3_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_Open_endedWritingPromptAdvanced_AddChild3 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_Open_endedWritingPromptAdvanced_Button1_i);
	mx.binding.BindingManager.executeBindings(this, "_Open_endedWritingPromptAdvanced_AddChild3", _Open_endedWritingPromptAdvanced_AddChild3);
	return temp;
}

private function _Open_endedWritingPromptAdvanced_Button1_i() : mx.controls.Button
{
	var temp : mx.controls.Button = new mx.controls.Button();
	btnShow = temp;
	temp.styleName = "ButtonHideDefinition";
	temp.setStyle("right", "0");
	temp.setStyle("verticalCenter", "0");
	temp.addEventListener("click", __btnShow_click);
	temp.id = "btnShow";
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function __btnShow_click(event:flash.events.MouseEvent):void
{
	Clik_btnShowHandler(event)
}

/**
 * @private
 **/
public function ___Open_endedWritingPromptAdvanced_State3_enterState(event:mx.events.FlexEvent):void
{
	enterState_stateAnswersWillVaryHandler(event)
}

/**
 * @private
 **/
public function ___Open_endedWritingPromptAdvanced_Canvas1_creationComplete(event:mx.events.FlexEvent):void
{
	creationCompleteHandler(event)
}


	//	binding mgmt
    private function _Open_endedWritingPromptAdvanced_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 45);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                this.width = _sourceFunctionReturnValue;
            },
            "this.width");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_edit);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _Open_endedWritingPromptAdvanced_State1.name = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_State1.name");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _Open_endedWritingPromptAdvanced_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_AddChild1.relativeTo");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (ActivityControl.MAX_WIDTH - 50);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                flowBox.width = _sourceFunctionReturnValue;
            },
            "flowBox.width");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_text);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _Open_endedWritingPromptAdvanced_State2.name = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_State2.name");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _Open_endedWritingPromptAdvanced_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_AddChild2.relativeTo");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (this.width - 20);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                txtFull.maxWidth = _sourceFunctionReturnValue;
            },
            "txtFull.maxWidth");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_answers_will_vary);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _Open_endedWritingPromptAdvanced_State3.name = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_State3.name");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_text);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _Open_endedWritingPromptAdvanced_State3.basedOn = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_State3.basedOn");
        result[9] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (this);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _Open_endedWritingPromptAdvanced_AddChild3.relativeTo = _sourceFunctionReturnValue;
            },
            "_Open_endedWritingPromptAdvanced_AddChild3.relativeTo");
        result[10] = binding;

        return result;
    }

    private function _Open_endedWritingPromptAdvanced_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_edit);
		[Binding(id='1')]
		destination = (ActivityControl.MAX_WIDTH - 45);
		[Binding(id='2')]
		destination = (state_edit);
		[Binding(id='3')]
		destination = (this);
		[Binding(id='4')]
		destination = (ActivityControl.MAX_WIDTH - 50);
		[Binding(id='5')]
		destination = (state_text);
		[Binding(id='6')]
		destination = (this);
		[Binding(id='7')]
		destination = (this.width - 20);
		[Binding(id='8')]
		destination = (state_answers_will_vary);
		[Binding(id='9')]
		destination = (state_text);
		[Binding(id='10')]
		destination = (this);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (Open_endedWritingPromptAdvanced)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
