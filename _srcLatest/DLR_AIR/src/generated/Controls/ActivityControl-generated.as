
/**
 * 	Generated by mxmlc 2.0
 *
 *	Package:	Controls
 *	Class: 		ActivityControl
 *	Source: 	P:\Active\EvanMoorEducationalPublishers\_svnPublic\DLR\_srcLatest\DLR_AIR\src\Controls\ActivityControl.mxml
 *	Template: 	flex2/compiler/mxml/gen/ClassDef.vm
 *	Time: 		2010.07.27 18:32:04 EEST
 */

package Controls
{

import flash.accessibility.*;
import flash.data.*;
import flash.debugger.*;
import flash.desktop.*;
import flash.display.*;
import flash.errors.*;
import flash.events.*;
import flash.events.MouseEvent;
import flash.external.*;
import flash.filesystem.*;
import flash.filters.*;
import flash.geom.*;
import flash.html.*;
import flash.html.script.*;
import flash.media.*;
import flash.net.*;
import flash.printing.*;
import flash.profiler.*;
import flash.system.*;
import flash.text.*;
import flash.ui.*;
import flash.utils.*;
import flash.xml.*;
import mx.binding.*;
import mx.binding.IBindingClient;
import mx.containers.Box;
import mx.containers.Canvas;
import mx.containers.VBox;
import mx.controls.Button;
import mx.core.ClassFactory;
import mx.core.DeferredInstanceFromClass;
import mx.core.DeferredInstanceFromFunction;
import mx.core.IDeferredInstance;
import mx.core.IFactory;
import mx.core.IPropertyChangeNotifier;
import mx.core.UIComponent;
import mx.core.UIComponentDescriptor;
import mx.core.mx_internal;
import mx.effects.Blur;
import mx.effects.Parallel;
import mx.effects.Resize;
import mx.effects.Sequence;
import mx.events.ChildExistenceChangedEvent;
import mx.events.ResizeEvent;
import mx.states.AddChild;
import mx.states.State;
import mx.states.Transition;
import mx.styles.*;



    [Event(name="action", type="Model.Events.ActivityControlEvent")]
  

//	begin class def

public class ActivityControl
	extends mx.containers.Canvas
	implements mx.binding.IBindingClient
{

	//	instance variables
	[Bindable]
/**
 * @private
 **/
	public var BoxConteiner : mx.containers.Box;

	[Bindable]
/**
 * @private
 **/
	public var ScrollConteiner : mx.containers.VBox;

/**
 * @private
 **/
	public var _ActivityControl_AddChild1 : mx.states.AddChild;

/**
 * @private
 **/
	public var _ActivityControl_AddChild2 : mx.states.AddChild;

/**
 * @private
 **/
	public var _ActivityControl_Resize2 : mx.effects.Resize;

/**
 * @private
 **/
	public var _ActivityControl_Resize3 : mx.effects.Resize;

/**
 * @private
 **/
	public var _ActivityControl_State1 : mx.states.State;

/**
 * @private
 **/
	public var _ActivityControl_State2 : mx.states.State;

	[Bindable]
/**
 * @private
 **/
	public var btnBack : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var btnContinue : mx.controls.Button;

	[Bindable]
/**
 * @private
 **/
	public var canButtons : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var canvBtnBack : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var canvBtnContinue : mx.containers.Canvas;

	[Bindable]
/**
 * @private
 **/
	public var showPromptEffect : mx.effects.Parallel;

	[Bindable]
/**
 * @private
 **/
	public var showResizeEffect : mx.effects.Resize;

	[Bindable]
/**
 * @private
 **/
	public var vbPrompts : mx.containers.VBox;


	//	type-import dummies


	//	Container document descriptor
private var _documentDescriptor_ : mx.core.UIComponentDescriptor = 
new mx.core.UIComponentDescriptor({
  type: mx.containers.Canvas
  ,
  propertiesFactory: function():Object { return {
    childDescriptors: [
      new mx.core.UIComponentDescriptor({
        type: mx.containers.VBox
        ,
        id: "ScrollConteiner"
        ,
        events: {
          resize: "__ScrollConteiner_resize"
        }
        ,
        stylesFactory: function():void {
          this.verticalGap = 10;
          this.paddingLeft = 15;
          this.paddingTop = 15;
        }
        ,
        propertiesFactory: function():Object { return {
          x: 0,
          y: 0,
          percentWidth: 100.0,
          verticalScrollPolicy: "off",
          horizontalScrollPolicy: "off",
          childDescriptors: [
            new mx.core.UIComponentDescriptor({
              type: mx.containers.VBox
              ,
              id: "vbPrompts"
              ,
              events: {
                childAdd: "__vbPrompts_childAdd",
                resize: "__vbPrompts_resize"
              }
              ,
              stylesFactory: function():void {
                this.verticalGap = 23;
              }
              ,
              propertiesFactory: function():Object { return {
                percentHeight: 100.0,
                percentWidth: 100.0,
                verticalScrollPolicy: "off",
                horizontalScrollPolicy: "off"
              }}
            })
          ,
            new mx.core.UIComponentDescriptor({
              type: mx.containers.Box
              ,
              id: "BoxConteiner"
              ,
              stylesFactory: function():void {
                this.horizontalAlign = "center";
              }
              ,
              propertiesFactory: function():Object { return {
                percentWidth: 100.0,
                childDescriptors: [
                  new mx.core.UIComponentDescriptor({
                    type: mx.containers.Canvas
                    ,
                    id: "canButtons"
                    ,
                    propertiesFactory: function():Object { return {
                      verticalScrollPolicy: "off",
                      horizontalScrollPolicy: "off",
                      childDescriptors: [
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.Canvas
                          ,
                          id: "canvBtnBack"
                          ,
                          stylesFactory: function():void {
                            this.left = "0";
                            this.verticalCenter = "0";
                          }
                        })
                      ,
                        new mx.core.UIComponentDescriptor({
                          type: mx.containers.Canvas
                          ,
                          id: "canvBtnContinue"
                          ,
                          stylesFactory: function():void {
                            this.right = "0";
                            this.verticalCenter = "0";
                          }
                        })
                      ]
                    }}
                  })
                ]
              }}
            })
          ]
        }}
      })
    ]
  }}
})

	//	constructor (Flex display object)
    /**
     * @private
     **/
	public function ActivityControl()
	{
		super();

		mx_internal::_document = this;

		//	our style settings



		//	properties
		this.percentWidth = 100.0;
		this.styleName = "listVerticalScrollBar";
		this.states = [_ActivityControl_State1_i(), _ActivityControl_State2_i()];
		this.transitions = [_ActivityControl_Transition1_c(), _ActivityControl_Transition2_c()];
		_ActivityControl_Parallel1_i();

		//	events

	}

	//	initialize()
    /**
     * @private
     **/
	override public function initialize():void
	{
 		mx_internal::setDocumentDescriptor(_documentDescriptor_);

		var bindings:Array = _ActivityControl_bindingsSetup();
		var watchers:Array = [];

		var target:ActivityControl = this;

		if (_watcherSetupUtil == null)
		{
			var watcherSetupUtilClass:Object = getDefinitionByName("_Controls_ActivityControlWatcherSetupUtil");
			watcherSetupUtilClass["init"](null);
		}

		_watcherSetupUtil.setup(this,
					function(propertyName:String):* { return target[propertyName]; },
					bindings,
					watchers);

		for (var i:uint = 0; i < bindings.length; i++)
		{
			Binding(bindings[i]).execute();
		}

		mx_internal::_bindings = mx_internal::_bindings.concat(bindings);
		mx_internal::_watchers = mx_internal::_watchers.concat(watchers);


		super.initialize();
	}

	//	scripts
	//	<Script>, line 9 - 474

      import mx.managers.CursorManager;
      import Model.EmbededData;
      import mx.events.ResizeEvent;
      import Controls.PromptControls.SentenceEvaluationControl;
      import Model.Prompts.SentenceEvaluation;
      import Controls.PromptControls.CloseSentenceControl;
      import Model.Prompts.CloseSentence;
      import Controls.PromptControls.ActivityMatchingControl;
      import Model.Prompts.ActivityMatching;
      import mx.core.Application;
      import Controls.PromptControls.SortingGraphicsControl;
      import Model.Prompts.SortingGraphics;
      import Model.Events.ActivityDirectionsEvent;
      import mx.events.ChildExistenceChangedEvent;
      import mx.events.EffectEvent;
      import mx.binding.utils.BindingUtils;
      import mx.effects.easing.Bounce;
      import mx.core.UIComponent;
      import mx.effects.Iris;
      import mx.events.FlexEvent;
      import Controls.PromptControls.DrawingAreaControl;
      import Model.Prompts.DrawingArea;
      import Controls.PromptControls.FixCapitalsControl;
      import Model.Prompts.FixCapitals;
      import Controls.PromptControls.SortingControl;
      import Model.Prompts.Sorting;
      import Controls.PromptControls.YesOrNoControl;
      import Model.Prompts.YesOrNo;
      import Controls.PromptControls.MatchingControl;
      import Model.Prompts.Matching;
      import Controls.PromptControls.Open_endedWritingPromptControl;
      import Controls.PromptControls.ActivityDirectionsControl;
      import Model.Events.ActivityControlEvent;
      import Model.Prompts.Open_endedWritingPrompt;
      import Model.Prompts.ActivityDirections;
      import Controls.Windows.AlertWindow;
      import Model.StateTypes;
      import Controls.PromptControls.MultipleChoiceControl;
      import Controls.PromptControls.PromptControl;
      import Model.Prompts.MultipleChoice;
      import Model.Prompts.Prompt;
      import Model.Activity;

      /***************************************************************
      *
      *  Module Name:
      *     Controls\ActivityControl.mxml
      *
      *  Abstract:
      *     This is activity control
      *
      *  Author:
      *     Evgenij Welikij   19-October-2009
      *
      *  Revision History:
      *
      ***************************************************************/


      /**
      * Static
      */
      public static const MAX_WIDTH:int = 799;

      private static var _isCheckAnswer:Boolean = true;

      public static function get isCheckAnswer():Boolean
      {
        return _isCheckAnswer;
      }

      /**
      * Private members/properties
      */
      protected var _activity:Activity;
      protected var _currentPromptIndex:int = 0;

      [Bindable]
			protected var _currentPromptControl:PromptControl;      // текущий контролл

			protected var _promptControls:Array = new Array();
      protected var _state:StateTypes;

      protected var _fontName:String;
      protected var _fontSize:int;
      protected var _fontColor:int;

      protected var _isDefaultFont:Boolean = true;

      private const state_main:String = "state_main";
      private const state_backButton:String = "state_backButton";

      private var _isCreatedVerticalScroll:Boolean = false;

      private var _fingerCursor:Class = EmbededData.inctance.fingerIcon;
      private var _cursorID:int;

      private function get isLast():Boolean
      {
        return _currentPromptIndex == _activity.prompts.length ? true : false;
      }

      private function get isSimple():Boolean
      {
        for each (var item:PromptControl in _promptControls)
          if (!item.IsSimple())
            return false;
        return true;
      }



      /**
      * Private methods
      */
      private function BuildPrompt(prompt:Prompt):void
      {
        _currentPromptControl =  PromptControl.BuildPromptControl(prompt);
        if (prompt is ActivityDirections)
          _currentPromptControl.addEventListener(ActivityDirectionsEvent.CREATE_PROMPT, CreatePrompt_currentPromptControlHandler);
        else if (prompt is CloseSentence)
          _currentPromptControl = new CloseSentenceControl(prompt as CloseSentence);
        else if (prompt is SentenceEvaluation)
          _currentPromptControl = new SentenceEvaluationControl(prompt as SentenceEvaluation);

        //_currentPromptControl.width = this.width;
        _currentPromptControl.isDefault = _isDefaultFont;
        _currentPromptControl.maxWidth = this.width;
        _currentPromptControl.setStyle("right", "150");
        _currentPromptControl.x = 150;
       /// _currentPromptControl.setStyle("backgroundColor", 0xFF0000);


        // add other type prompt here

        _state = _currentPromptControl.state;

        // set styles
        _currentPromptControl.FontName(_fontName);
        _currentPromptControl.FontSize(_fontSize);
        _currentPromptControl.FontColor(_fontColor);
        _currentPromptControl.Bold();
        _promptControls.push(_currentPromptControl);
        vbPrompts.addChild(_currentPromptControl);

        _currentPromptControl.addEventListener(FlexEvent.CREATION_COMPLETE, CreationComplete_currentPromptControlHandler);
      }

      // build prompt control by index in prompts array
      // return new prompt index or -1 if error
      private function BuildPromptByIndex(index:int):int
      {
        if (index >= 0 && index < _activity.prompts.length)
        {
          BuildPrompt(_activity.prompts[index]);
          return index + 1;
        }

        return -1;
      }

      private function FocusNewPrompt():void
      {
        verticalScrollPosition = maxVerticalScrollPosition;
      }


      /**
      * Events handler
      */
      private function CreationComplete_currentPromptControlHandler(event:FlexEvent):void
      {
        showPromptEffect.play([event.currentTarget as UIComponent]);
      }

      // если контролл создается внутри ActivityDirectionControls
      private function CreatePrompt_currentPromptControlHandler(event:ActivityDirectionsEvent):void
      {
        showPromptEffect.play([event.promptControl]);
      }

      private function ChildAdd_vbPromptsHandler(event:ChildExistenceChangedEvent):void
      {
        callLater(FocusNewPrompt);
      }

      private function Click_btnContinue(event:MouseEvent):void
      {
        var isCanEnterState_backButton:Boolean = true;
        dispatchEvent(new ActivityControlEvent(ActivityControlEvent.ACTION, _activity));

        try
        {
          _state = _currentPromptControl.state;

          if (_currentPromptIndex != -1)
          {
            // check current state for prompt control
            switch (_state)
            {
              case StateTypes.CHECK_ANSWER:
                {
                  _currentPromptControl.CheckAnswer();
                  break;
                }

              case StateTypes.SHOW_ANSWER:
                {
                  _currentPromptControl.ShowAnswer();
                  break;
                }

              case StateTypes.CONTINUE:
                {

                  _currentPromptControl.Continue();

                  // эта ситуация возникает в том случае, если
                  // в контрола ActivityDirections несколько дочерних контроллов
                  if (_currentPromptControl.stateArray.length == 0)
                  {
                    if (!isSimple || !isLast)
                      _currentPromptControl.Disable();

                    _currentPromptIndex = BuildPromptByIndex(_currentPromptIndex);
                  }
                  break;
                }
              case StateTypes.NEXT:
                {
                  _currentPromptControl.Continue();
                  break;
                }
            }
            _state = _currentPromptControl.NextState();

            // if last prompt change label to "Show All"
            if (_currentPromptIndex == -1)
            {
              if (!isSimple)
                btnContinue.label = "Show All";
              else
              {
                for each (var item:PromptControl in _promptControls)
                  item.Enable();

                currentState = state_backButton;
                btnContinue.label = "Done";
                btnContinue.removeEventListener(MouseEvent.CLICK, Click_btnContinue);
                btnContinue.addEventListener(MouseEvent.CLICK, Click_Done);

                canButtons.width = btnContinue.width;
              }
            }
            else
            {
              // если это последний промпт и последнее состояние,
              // то переводим кнопку Continue в режим ShowAll
              if (_currentPromptControl.IsFinalState() && _currentPromptIndex == _activity.prompts.length
                && _state != StateTypes.NEXT)
              {

                if (_activity.countChildPrompts <= 1)
                {
                  isCanEnterState_backButton = false;
               //   currentState = state_main;
                  btnContinue.label = "Done";
                  btnContinue.removeEventListener(MouseEvent.CLICK, Click_btnContinue);
                  btnContinue.addEventListener(MouseEvent.CLICK, Click_Done);
                 //Кнопки  Done и Back вместе быть не могут потому удаляем кнопку   Back
                 if (btnBack != null)
                     canvBtnBack.removeAllChildren();
                  canButtons.width = btnContinue.width;
                }
                else
                {
                  btnContinue.label = "Show All";
                  _currentPromptControl.NextState();
                  _currentPromptIndex = -1;
                }
              }
              else
                btnContinue.label = _state.operationName;
            }
            if (isCanEnterState_backButton == true)
                currentState = state_backButton;
          }
          else
          {
            _currentPromptControl.Continue();

            // press "Show All"
            for each (item in _promptControls)
              item.Enable();

            currentState = state_backButton;
            btnContinue.label = "Done";
            btnContinue.removeEventListener(MouseEvent.CLICK, Click_btnContinue);
            btnContinue.addEventListener(MouseEvent.CLICK, Click_Done);
           // btnBack.visible = false;
            canButtons.width = btnContinue.width;
          }
        }
        catch (error:Error)
        {
          AlertWindow.Show(this, "OOPS!", error.message);
        }
      }

      private function Click_btnBack(event:MouseEvent):void
      {
        if (_currentPromptIndex == -1)
        {
          for each (var item:PromptControl in _promptControls)
              item.Disable();
          _currentPromptIndex = _promptControls.length;
          _currentPromptControl.isStartState = false;
        }

        if (_currentPromptControl.isStartState == false ||
            _promptControls.length == 1)
        {
          _currentPromptIndex--;

          vbPrompts.removeChild(_currentPromptControl);
          _promptControls.pop();
        }
        else
        {
          _promptControls.pop();
          vbPrompts.removeChild(_currentPromptControl);
          _currentPromptControl = _promptControls.pop();
         
          if (_currentPromptControl == null)
              return;
              
          vbPrompts.removeChild(_currentPromptControl);

          _currentPromptIndex -= 2;
        }

        _currentPromptIndex = BuildPromptByIndex(_currentPromptIndex);

        _state = _currentPromptControl.NextState();
        btnContinue.label = _state.operationName;

        if (_currentPromptIndex == 1)
          currentState = state_main;

      }

      private function Click_Done(event:MouseEvent):void
      {
        dispatchEvent(new ActivityControlEvent(ActivityControlEvent.CONTINUE, _activity));
      }


      private function resize_ScrollConteinerHandler(event:ResizeEvent):void
      {
          if (this.ScrollConteiner.height > this.height)
              this._isCreatedVerticalScroll = true;
          else
              this._isCreatedVerticalScroll = false;
      }

      private function rollOver_buttonHandler(event:MouseEvent):void
      {
        _cursorID = CursorManager.setCursor(_fingerCursor);
      }

      private function rollOut_buttonHandler(event:MouseEvent):void
      {
        CursorManager.removeCursor(_cursorID);
      }


      /**
      * Initialization
      */
      public function Init(activity:Activity):void
      {
        this._activity = activity;

        _promptControls = new Array();
        vbPrompts.removeAllChildren();

        isDefault = true;

        if(canButtons.width >= (btnContinue.width + btnBack.width + 50))
             canButtons.width = btnContinue.width;
        currentState = state_main;

        _currentPromptIndex = 0;
        _currentPromptIndex = BuildPromptByIndex(_currentPromptIndex);

        _state = _currentPromptControl.NextState();


      //   if (btnBack != null)
       //      btnBack.visible = true;
        btnContinue.label = _state.operationName;
        btnContinue.removeEventListener(MouseEvent.CLICK, Click_Done);
        btnContinue.addEventListener(MouseEvent.CLICK, Click_btnContinue);
      }


      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */


      /**
      * Public members/properties
      */
      public function set isDefault(value:Boolean):void
      {
        _isDefaultFont = value;

       //Надо пробегать по всем контролам

        for each (var item:PromptControl in _promptControls)
          item.isDefault = value;
      }

      public function set isCheckAnswer(value:Boolean):void
      {
        _isCheckAnswer = value;
      }

      public function get isCreatedVerticalScroll():Boolean
      {
        return this._isCreatedVerticalScroll;
      }

      /**
      * Public methods
      */
      public function FontName(name:String):void
      {
        _fontName = name;
        for each (var promptControl:PromptControl in vbPrompts.getChildren())
            promptControl.FontName(name);
      }

      public function FontSize(size:int):void
      {
        _fontSize = size;
        for each (var promptControl:PromptControl in vbPrompts.getChildren())
          promptControl.FontSize(size);
      }

      public function FontColor(color:int):void
      {
        _fontColor = color;
        for each (var promptControl:PromptControl in vbPrompts.getChildren())
          promptControl.FontColor(color);
      }


    

	//	end scripts


    //	supporting function definitions for properties, events, styles, effects
private function _ActivityControl_Parallel1_i() : mx.effects.Parallel
{
	var temp : mx.effects.Parallel = new mx.effects.Parallel();
	showPromptEffect = temp;
	temp.children = [_ActivityControl_Resize1_i(), _ActivityControl_Sequence1_c()];
	return temp;
}

private function _ActivityControl_Resize1_i() : mx.effects.Resize
{
	var temp : mx.effects.Resize = new mx.effects.Resize();
	showResizeEffect = temp;
	temp.duration = 300;
	temp.heightFrom = 0;
	return temp;
}

private function _ActivityControl_Sequence1_c() : mx.effects.Sequence
{
	var temp : mx.effects.Sequence = new mx.effects.Sequence();
	temp.children = [_ActivityControl_Blur1_c(), _ActivityControl_Blur2_c()];
	return temp;
}

private function _ActivityControl_Blur1_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 1.0;
	temp.blurYTo = 20.0;
	return temp;
}

private function _ActivityControl_Blur2_c() : mx.effects.Blur
{
	var temp : mx.effects.Blur = new mx.effects.Blur();
	temp.duration = 200;
	temp.blurYFrom = 20.0;
	temp.blurYTo = 1;
	return temp;
}

private function _ActivityControl_State1_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_ActivityControl_State1 = temp;
	temp.overrides = [_ActivityControl_AddChild1_i()];
	mx.binding.BindingManager.executeBindings(this, "_ActivityControl_State1", _ActivityControl_State1);
	return temp;
}

private function _ActivityControl_AddChild1_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_ActivityControl_AddChild1 = temp;
	temp.creationPolicy = "all";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_ActivityControl_Button1_i);
	mx.binding.BindingManager.executeBindings(this, "_ActivityControl_AddChild1", _ActivityControl_AddChild1);
	return temp;
}

private function _ActivityControl_Button1_i() : mx.controls.Button
{
	var temp : mx.controls.Button = new mx.controls.Button();
	btnContinue = temp;
	temp.styleName = "button";
	temp.addEventListener("rollOver", __btnContinue_rollOver);
	temp.addEventListener("rollOut", __btnContinue_rollOut);
	temp.id = "btnContinue";
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function __btnContinue_rollOver(event:flash.events.MouseEvent):void
{
	rollOver_buttonHandler(event)
}

/**
 * @private
 **/
public function __btnContinue_rollOut(event:flash.events.MouseEvent):void
{
	rollOut_buttonHandler(event)
}

private function _ActivityControl_State2_i() : mx.states.State
{
	var temp : mx.states.State = new mx.states.State();
	_ActivityControl_State2 = temp;
	temp.overrides = [_ActivityControl_AddChild2_i()];
	mx.binding.BindingManager.executeBindings(this, "_ActivityControl_State2", _ActivityControl_State2);
	return temp;
}

private function _ActivityControl_AddChild2_i() : mx.states.AddChild
{
	var temp : mx.states.AddChild = new mx.states.AddChild();
	_ActivityControl_AddChild2 = temp;
	temp.creationPolicy = "all";
	temp.position = "0";
	temp.targetFactory = new mx.core.DeferredInstanceFromFunction(_ActivityControl_Button2_i);
	mx.binding.BindingManager.executeBindings(this, "_ActivityControl_AddChild2", _ActivityControl_AddChild2);
	return temp;
}

private function _ActivityControl_Button2_i() : mx.controls.Button
{
	var temp : mx.controls.Button = new mx.controls.Button();
	btnBack = temp;
	temp.label = "Back";
	temp.styleName = "button";
	temp.addEventListener("click", __btnBack_click);
	temp.addEventListener("rollOver", __btnBack_rollOver);
	temp.addEventListener("rollOut", __btnBack_rollOut);
	temp.id = "btnBack";
	if (!temp.document) temp.document = this;
	return temp;
}

/**
 * @private
 **/
public function __btnBack_click(event:flash.events.MouseEvent):void
{
	Click_btnBack(event)
}

/**
 * @private
 **/
public function __btnBack_rollOver(event:flash.events.MouseEvent):void
{
	rollOver_buttonHandler(event)
}

/**
 * @private
 **/
public function __btnBack_rollOut(event:flash.events.MouseEvent):void
{
	rollOut_buttonHandler(event)
}

private function _ActivityControl_Transition1_c() : mx.states.Transition
{
	var temp : mx.states.Transition = new mx.states.Transition();
	temp.fromState = "state_main";
	temp.toState = "state_backButton";
	temp.effect = _ActivityControl_Resize2_i();
	return temp;
}

private function _ActivityControl_Resize2_i() : mx.effects.Resize
{
	var temp : mx.effects.Resize = new mx.effects.Resize();
	_ActivityControl_Resize2 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ActivityControl_Resize2", _ActivityControl_Resize2);
	return temp;
}

private function _ActivityControl_Transition2_c() : mx.states.Transition
{
	var temp : mx.states.Transition = new mx.states.Transition();
	temp.fromState = "state_backButton";
	temp.toState = "state_main";
	temp.effect = _ActivityControl_Resize3_i();
	return temp;
}

private function _ActivityControl_Resize3_i() : mx.effects.Resize
{
	var temp : mx.effects.Resize = new mx.effects.Resize();
	_ActivityControl_Resize3 = temp;
	mx.binding.BindingManager.executeBindings(this, "_ActivityControl_Resize3", _ActivityControl_Resize3);
	return temp;
}

/**
 * @private
 **/
public function __ScrollConteiner_resize(event:mx.events.ResizeEvent):void
{
	resize_ScrollConteinerHandler(event)
}

/**
 * @private
 **/
public function __vbPrompts_childAdd(event:mx.events.ChildExistenceChangedEvent):void
{
	ChildAdd_vbPromptsHandler(event)
}

/**
 * @private
 **/
public function __vbPrompts_resize(event:mx.events.ResizeEvent):void
{
	{verticalScrollPosition = this.maxVerticalScrollPosition}
}


	//	binding mgmt
    private function _ActivityControl_bindingsSetup():Array
    {
        var result:Array = [];
        var binding:Binding;

        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_main);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                this.currentState = _sourceFunctionReturnValue;
            },
            "this.currentState");
        result[0] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_main);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _ActivityControl_State1.name = _sourceFunctionReturnValue;
            },
            "_ActivityControl_State1.name");
        result[1] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (canvBtnContinue);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _ActivityControl_AddChild1.relativeTo = _sourceFunctionReturnValue;
            },
            "_ActivityControl_AddChild1.relativeTo");
        result[2] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_backButton);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _ActivityControl_State2.name = _sourceFunctionReturnValue;
            },
            "_ActivityControl_State2.name");
        result[3] = binding;
        binding = new mx.binding.Binding(this,
            function():String
            {
                var result:* = (state_main);
                var stringResult:String = (result == undefined ? null : String(result));
                return stringResult;
            },
            function(_sourceFunctionReturnValue:String):void
            {
				
                _ActivityControl_State2.basedOn = _sourceFunctionReturnValue;
            },
            "_ActivityControl_State2.basedOn");
        result[4] = binding;
        binding = new mx.binding.Binding(this,
            function():mx.core.UIComponent
            {
                return (canvBtnBack);
            },
            function(_sourceFunctionReturnValue:mx.core.UIComponent):void
            {
				
                _ActivityControl_AddChild2.relativeTo = _sourceFunctionReturnValue;
            },
            "_ActivityControl_AddChild2.relativeTo");
        result[5] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (btnContinue.width + 210);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                _ActivityControl_Resize2.widthTo = _sourceFunctionReturnValue;
            },
            "_ActivityControl_Resize2.widthTo");
        result[6] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (canButtons);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                _ActivityControl_Resize2.target = _sourceFunctionReturnValue;
            },
            "_ActivityControl_Resize2.target");
        result[7] = binding;
        binding = new mx.binding.Binding(this,
            function():Function
            {
                return (Bounce.easeOut);
            },
            function(_sourceFunctionReturnValue:Function):void
            {
				
                _ActivityControl_Resize2.easingFunction = _sourceFunctionReturnValue;
            },
            "_ActivityControl_Resize2.easingFunction");
        result[8] = binding;
        binding = new mx.binding.Binding(this,
            function():Number
            {
                return (btnContinue.width);
            },
            function(_sourceFunctionReturnValue:Number):void
            {
				
                _ActivityControl_Resize3.widthTo = _sourceFunctionReturnValue;
            },
            "_ActivityControl_Resize3.widthTo");
        result[9] = binding;
        binding = new mx.binding.Binding(this,
            function():Object
            {
                return (canButtons);
            },
            function(_sourceFunctionReturnValue:Object):void
            {
				
                _ActivityControl_Resize3.target = _sourceFunctionReturnValue;
            },
            "_ActivityControl_Resize3.target");
        result[10] = binding;

        return result;
    }

    private function _ActivityControl_bindingExprs():void
    {
        var destination:*;
		[Binding(id='0')]
		destination = (state_main);
		[Binding(id='1')]
		destination = (state_main);
		[Binding(id='2')]
		destination = (canvBtnContinue);
		[Binding(id='3')]
		destination = (state_backButton);
		[Binding(id='4')]
		destination = (state_main);
		[Binding(id='5')]
		destination = (canvBtnBack);
		[Binding(id='6')]
		destination = (btnContinue.width + 210);
		[Binding(id='7')]
		destination = (canButtons);
		[Binding(id='8')]
		destination = (Bounce.easeOut);
		[Binding(id='9')]
		destination = (btnContinue.width);
		[Binding(id='10')]
		destination = (canButtons);
    }

    /**
     * @private
     **/
    public static function set watcherSetupUtil(watcherSetupUtil:IWatcherSetupUtil):void
    {
        (ActivityControl)._watcherSetupUtil = watcherSetupUtil;
    }

    private static var _watcherSetupUtil:IWatcherSetupUtil;



	//	embed carrier vars
	//	end embed carrier vars

	//	binding management vars
    /**
     * @private
     **/
    mx_internal var _bindings : Array = [];
    /**
     * @private
     **/
    mx_internal var _watchers : Array = [];
    /**
     * @private
     **/
    mx_internal var _bindingsByDestination : Object = {};
    /**
     * @private
     **/
    mx_internal var _bindingsBeginWithWord : Object = {};

//	end class def
}

//	end package def
}
