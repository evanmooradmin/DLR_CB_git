<?xml version="1.0" encoding="utf-8"?>
<BaseUIControl  xmlns="Controls.PromptControls.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
  updateComplete="UpdateComplete(event)"   verticalScrollPolicy="off" horizontalScrollPolicy="off"
   xmlns:controls="Controls.Enviroment.*" initialize="InitializeHandler(event)" creationComplete="CreationCompleteHandler(event)" >
  <mx:Script>
    <![CDATA[
      import interfaces.IBasePrompt;
      import Model.StateTypes;
      import Controls.PromptControls.RewriteSentenceControl;
      import interfaces.em.EMUserTypes;
      import Controls.QuizControl;
      import Model.Preferences;
      import mx.controls.TextInput;
      import mx.controls.TextArea;
      import mx.core.IUITextField;
      import mx.core.UIComponent;
      import mx.controls.Alert;
      import mx.accessibility.AlertAccImpl;
      import Model.EditDistanceExt;
      import Model.EnumRegExp;
      import Model.FactoryRegExp;
      import Model.Syntax.RelationSentence;
      import Model.Prompts.RewriteSentence;
      import Model.EmbededData;
      import Controls.ActivityControl;
      import mx.events.FlexEvent;
      import Model.Prompts.Prompt;
      /***************************************************************
      *
      *  Module Name:
      *     Controls\SimplePromptControls\RewriteSentencesViewControl.mxml
      *
      *  Abstract:
      *     This is visual control for rewrite sentences prompt
      *
      *  Author:
      *     Evgenij Welikij   29-October-2009
      *
      *  Revision History:
      *
      ***************************************************************/
      //  var point:Point = localToGlobal(new Point());
      //  point = QuizControl.instance.globalToLocal(point);

      /**
      * Static
      */


      /**
      * Private members/properties
      */
      private var _answer:RewriteSentence;
      private var _isContinue:Boolean = false;        // флаг указывающий на то пройдено это упражнение или нет

      private const state_edit:String = "state_edit";
      //Состояние содержит поле для ввода и кнопки для переключения режисов ввода текста
      private const state_edit_keybord:String = "state_edit_keybord";
      private const state_drow:String= "state_drow";
      private const state_correct:String = "state_correct";
      private const state_correct_with_DrawingArea:String = "state_correct_with_DrawingArea";
      private const state_incorrect:String = "state_incorrect";
      private const state_correctAndIncorrect:String = "state_correctAndIncorrect";
      private const state_editHeight:String = "state_editHeight";
      
      //Загружаем ли мы ответы пользователя в данный момент или нет
      private var _isDeserialize:Boolean = false;
      private var _prompt:Prompt;
      private var _parentControl:RewriteSentenceControl;
     

      /**
      * Private methods
      */
      private function InitStateText():void
      {
        if (currentState != state_edit_keybord)
        {  
           currentState = state_edit_keybord;
           _parentControl.SetCurrentState(StateTypes.CHECK_ANSWER);
           ActivityControl.isDrawingAreaUsing = false;
        }
      }
    
      private function InitStateDrow():void
      {
        if (_parentControl != null)
        {
            currentState = state_drow
            drawingArea.pencil = true;
            ActivityControl.isDrawingAreaUsing = true;
           _parentControl.SetCurrentState(StateTypes.SHOW_ANSWER); 
        }
      }
    
      /**
      * Events handler
      */
      private function UpdateComplete(event:FlexEvent):void
      {
        // устанавливаем длинну текст бокса
//        var point:Point = new Point(textInput.x, textInput.y);
//        point = localToGlobal(point);
//
//        point = QuizControl.instance.globalToLocal(point);
        // учитаваем его положение по "x"
       // textInput.width = ActivityControl.MAX_WIDTH - point.x - 15;
      }

      private function UpdateComplete_textInput(event:TextEvent):void
      {
        /*var textMetrics:TextLineMetrics = textInput.measureText(textInput.text);
        var textWidth:int = textMetrics.width + textMetrics.x * 20;

        if (textWidth > textInput.width && currentState == state_edit)
        {
          currentState = state_editHeight;
          txtAutoResize.setFocus();
        }
        else if (textWidth < textInput.width && currentState == state_editHeight)
        {
          currentState = state_edit;
          textInput.setFocus();
        }*/
      }

      private function FocusInHandler(event:FocusEvent):void
      {
        var control:UIComponent = event.currentTarget as UIComponent;

        if (control is TextArea)
        {
          (control as TextArea).selectionBeginIndex = (control as TextArea).text.length + 1;
          (control as TextArea).selectionEndIndex = (control as TextArea).text.length + 1;
        }
        else if (control is TextInput)
        {
          (control as TextInput).selectionBeginIndex = (control as TextInput).text.length + 1;
          (control as TextInput).selectionEndIndex = (control as TextInput).text.length + 1;
        }

      }
      
      private function click_btnText(event:MouseEvent):void
      {
        InitStateText();
      }
      
      private function click_btnDrow(event:MouseEvent):void
      {
        InitStateDrow();
      }
      
      private function click_btnLastic(event:MouseEvent):void
      {
       drawingArea.lastic = true;
      }
      
      /**
      * Initialization
      */
      private function InitializeHandler(event:FlexEvent):void
      {
      }
      
      private function CreationCompleteHandler(event:FlexEvent):void
      {
         // Вырезаем все теги типа {0} 
         textSentences.htmlText = _prompt.text.replace(new RegExp('\\{\\s*?[0-9]{1,2}\\s*?\\}','g'),'');
         // оставляем только по 1 пробелу
         textSentences.htmlText = textSentences.htmlText.replace(FactoryRegExp.instance.DeleteSpaces(EnumRegExp.G),' ');
         // удаляем пробелы в начале строки
         textSentences.htmlText = textSentences.htmlText.replace(FactoryRegExp.instance.SpacesStartString(EnumRegExp.Empty),''); 
         // удаляем пробелы в конце строки
         textSentences.htmlText = textSentences.htmlText.replace(FactoryRegExp.instance.SpacesFinishString(EnumRegExp.Empty),'');
      
       // устанавливаем длинну данного контрола
        var point:Point = new Point();
        point = localToGlobal(point);
        point = QuizControl.instance.globalToLocal(point);
        this.width = ActivityControl.MAX_WIDTH - 30 - point.x;  
        vBox.width = this.width; 
     
           
        if (ActivityControl.userType == EMUserTypes.EM_Teacher)
        {  
            if (ActivityControl.isDrawingAreaUsing) 
            {
                currentState = state_drow;
                keyboard.stateDrowActive = true;
                InitStateDrow();
            }
            else     
                currentState = state_edit_keybord
            keyboard.btnText.addEventListener(MouseEvent.CLICK, click_btnText);
            keyboard.btnDrow.addEventListener(MouseEvent.CLICK, click_btnDrow);
            keyboard.btnLastic.addEventListener(MouseEvent.CLICK, click_btnLastic); 
        }
        else 
            currentState = state_edit  
        
      }
      
      /**
      * Constructor
      */


      /**
      * Virtuals methods
      */
      public override function FontName():void
      {
        textSentences.setStyle("fontFamily", _fontName);
        textInput.setStyle("fontFamily", _fontName);
        textAnswerIncorrect.setStyle("fontFamily", _fontName);
        textAnswerCorrect.setStyle("fontFamily", _fontName);

     //  textArea.height = textSentences.measureText("A").height + textSentences.measureText("A").leading;
      }

      public override function FontSize():void
      {
        textSentences.setStyle("fontSize", _fontSize + 1);
        textInput.setStyle("fontSize", _fontSize);
        textAnswerCorrect.setStyle("fontSize", _fontSize);
        textAnswerIncorrect.setStyle("fontSize", _fontSize);

      //  textArea.height = textSentences.measureText("A").height + textSentences.measureText("A").leading;

        imgCorrect.width = _fontSize;
        imgCorrect.height = _fontSize;
        imgIncorrect.width = _fontSize;
        imgIncorrect.height = _fontSize;
      }

      public override function FontColor():void
      {
        textSentences.setStyle("color", _fontColor);
        textInput.setStyle("color", _fontColor);
        textAnswerCorrect.setStyle("color", _fontColor);
        textAnswerIncorrect.setStyle("color", _fontColor);
      }

      public override function Bold():void
      {
      }

      public override function IsComplete():Boolean
      {
        if (_isDeserialize || QuizControl.instance.preferences.isCheckAnswer == false)
            return true;
        if (ActivityControl.isDrawingAreaUsing)
        	return true;	    
        //Проверяем ввел  ли пользователь текст
        return (FactoryRegExp.trim(textInput.text) == "") ? false : true;
      }

      public override function Init(prompt:IBasePrompt):void
      {
       this._prompt = prompt as Prompt; 
    
       _answer = RewriteSentence(prompt);
      }

      public override function GetText():String
      {
        // Нормализируем апострофы которые мог ввести пользователь на обычный из xml
        textInput.text =  textInput.text.replace(new RegExp('[’`]','g'),'\'');
        // заменяем кавычки на нормальные чтобы сравнить строки
        textInput.text = textInput.text.replace(new RegExp("[“”]", "g"), "\"");
        return textInput.text;
      }

      public override function Continue():void
      {
        currentState = state_correct;
        _isContinue = true;
      }

      public override function SetIncorrect():void
      {
        if (!_isContinue)
        {
          currentState = state_incorrect;
        }
      }

      public override function SetCorrect():void
      {
        if (!_isContinue)
        {
                // сдесь устанавливаем правильный ответ
              //  textInput.text = _answer.answer;

                //Удаляем все марки
                var answerWrong:String = _answer.text.replace(FactoryRegExp.instance.Mark(EnumRegExp.G),'');
                var answerRich:String = _answer.answer.replace(FactoryRegExp.instance.Mark(EnumRegExp.G),'');
                //Удаляем все теги <br>
                answerWrong = answerWrong.replace(FactoryRegExp.instance.BR(EnumRegExp.G),' ');
                answerRich = answerRich.replace(FactoryRegExp.instance.BR(EnumRegExp.G),' ');
                answerRich = answerRich.replace(new RegExp("[“”]", "g"), "\"");

                var editDistance:EditDistanceExt = new EditDistanceExt(answerRich, answerWrong, EmbededData.inctance.iconCorrectColorHex);

                textAnswerCorrect.htmlText = editDistance.compareString;
                textAnswerCorrect.htmlText = textAnswerCorrect.htmlText.replace(new RegExp('\n','g'),'');


                if (currentState == state_incorrect || isCheckAnswer == false)
                    currentState = state_correctAndIncorrect;
                else if (currentState == state_drow)
                          currentState = state_correct_with_DrawingArea;
                else           
                     currentState = state_correct;
        }
      }
    
      public override function DefaultFont():void
      {
        textSentences.setStyle("fontFamily", "Futura");
        textInput.setStyle("fontFamily", "EMComic");
        textAnswerIncorrect.setStyle("fontFamily", "EMComic");
        textAnswerCorrect.setStyle("fontFamily", "EMComic");
      }

       //Сохраняем данные которые ввел пользователь 
      public override function SaveResults():void
      {
        this._prompt.result = textInput.text;
      }
      
      //Загружаем данные которые ввел пользователь 
      public override function LoadResults(needCheckAnswer:Boolean = false):void
      {
        if (_isDeserialize)
            this._isDeserialize = true;
            textInput.text = this._answer.result;
      }
      
      /**
      * Public members/properties
      */
      //Отключена ли оцпия CheckAnswer в настройках
       public var isCheckAnswer:Boolean = true;
       
       public function set parentControl(control:RewriteSentenceControl):void
       {
         _parentControl = control;
       }
        
      /**
      * Public methods
      */



    ]]>
  </mx:Script>

  <transitions>
    <mx:Transition fromState="{state_incorrect}" toState="{state_correctAndIncorrect}">
      <mx:Parallel target="{hBoxCorrect}">
        <mx:Resize duration="300" heightFrom="0" id="showResizeEffect"/>
        <mx:Sequence>
          <mx:Blur duration="200" blurYFrom="1.0" blurYTo="20.0"/>
          <mx:Blur duration="200" blurYFrom="20.0" blurYTo="1"/>
        </mx:Sequence>
      </mx:Parallel>
    </mx:Transition>
  </transitions>

  <states>
    <mx:State name="{state_edit}">
      <mx:AddChild relativeTo="{boxContent}" creationPolicy="all"> 
        <controls:AutoResizableTextArea id="textInput" styleName="listVerticalScrollBar" autoResizeble="true" width="890" />
      </mx:AddChild>
    </mx:State>
    
    <mx:State name="{state_edit_keybord}" basedOn="{state_edit}">
      <mx:AddChild relativeTo="{hBoxContainer}" creationPolicy="all">
       <controls:Keyboard id="keyboard" />
      </mx:AddChild>
    </mx:State>
    
    <mx:State name="{state_drow}" basedOn="{state_edit_keybord}">
      <mx:RemoveChild target="{textInput}" />
      <mx:AddChild relativeTo="{boxContent}" creationPolicy="all" position="firstChild">
            <controls:DrawingArea id="drawingArea" width="890" height="200" borderStyle="solid"  />
      </mx:AddChild>
      
    </mx:State>
    
    
    <mx:State name="{state_incorrect}">
      <mx:AddChild relativeTo="{boxContent}" creationPolicy="all">
        <mx:HBox verticalAlign="middle" id="hBoxIncorrect" width="100%"  horizontalScrollPolicy="off" verticalScrollPolicy="off">
          <mx:Image id="imgIncorrect" source="{EmbededData.inctance.iconIncorrect}"/>
          <controls:TextExended id="textAnswerIncorrect" selectable="false" htmlText="{textInput.text}" width="100%"/>
        </mx:HBox>
      </mx:AddChild>
    </mx:State>

    <mx:State name="{state_correctAndIncorrect}" basedOn="{state_incorrect}">
      <mx:AddChild relativeTo="{boxContent}" creationPolicy="all">
        <mx:HBox verticalAlign="middle" id="hBoxCorrect" width="100%" horizontalScrollPolicy="off" verticalScrollPolicy="off">
          <mx:Image id="imgCorrect" source="{EmbededData.inctance.iconCorrect}"/>
          <controls:TextExended id="textAnswerCorrect" selectable="false" width="100%" />
        </mx:HBox>
      </mx:AddChild>
    </mx:State>

    <mx:State name="{state_correct}" basedOn="{state_correctAndIncorrect}">
      <mx:RemoveChild target="{hBoxIncorrect}"/>
    </mx:State>
    
    <mx:State name="{state_correct_with_DrawingArea}" basedOn="{state_correctAndIncorrect}">
      <mx:RemoveChild target="{hBoxIncorrect}"/>
      <mx:AddChild  relativeTo="{boxContent}" creationPolicy="all" target="{drawingArea}" position="firstChild" />
      <mx:SetProperty  target="{drawingArea}" name="activeDrawingArea" value="false"/>
    </mx:State>
  </states>

  <mx:VBox id="vBox" width="100%" verticalScrollPolicy="off" horizontalScrollPolicy="off">
    <controls:TextExended id="textSentences" selectable="false" width="100%"/>
    <mx:HBox id="hBoxContainer"  width="100%" verticalGap="0" horizontalGap="2" verticalAlign="top" verticalScrollPolicy="off" horizontalScrollPolicy="off" >
          <mx:Box id="boxContent" paddingLeft="1" width="100%" paddingBottom="1" paddingRight="1" paddingTop="1" /> 
    </mx:HBox>
  </mx:VBox>

</BaseUIControl>
